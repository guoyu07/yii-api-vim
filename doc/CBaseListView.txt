
*CBaseListView*   >> |CWidget| >> |CBaseController| >> |CComponent|
===============

 CBaseListView is the base class for |CListView| and |CGridView|.

 CBaseListView implements the common features needed by a view wiget for
 rendering multiple models.


PROPERTY DETAILS
------------------------------------------------------------------------------

<actionPrefix>				*CBaseListView::actionPrefix*
 See |CWidget::actionPrefix|

<controller>				*CBaseListView::controller*
 See |CWidget::controller|

<dataProvider>				*CBaseListView::dataProvider*
 (IDataProvider) the data provider for the view.

<emptyText>				*CBaseListView::emptyText*
 (string) the message to be displayed when |CBaseListView::dataProvider| does
 not have any data.

<enablePagination>			*CBaseListView::enablePagination*
 (boolean) whether to enable pagination. Note that if the
 |IDataProvider::pagination| property of |CBaseListView::dataProvider| is
 false, this will be treated as false as well. When pagination is enabled, a
 pager will be displayed in the view so that it can trigger pagination of the
 data display. Defaults to true.

<enableSorting> 			*CBaseListView::enableSorting*
 (boolean) whether to enable sorting. Note that if the |IDataProvider::sort|
 property of |CBaseListView::dataProvider| is false, this will be treated as
 false as well. When sorting is enabled, sortable columns will have their
 headers clickable to trigger sorting along that column. Defaults to true.

<htmlOptions>				*CBaseListView::htmlOptions*
 (array) the HTML options for the view container tag.

<id>					*CBaseListView::id*
 See |CWidget::id|

<itemsCssClass> 			*CBaseListView::itemsCssClass*
 (string) the CSS class name for the container of all data item display.
 Defaults to 'items'.

<loadingCssClass>			*CBaseListView::loadingCssClass*
 (string) the CSS class name that will be assigned to the widget container
 element when the widget is updating its content via AJAX. Defaults to
 'loading'.

<owner> 				*CBaseListView::owner*
 See |CWidget::owner|

<pager> 				*CBaseListView::pager*
 (array|string) the configuration for the pager. Defaults to
 'array('class'=>'CLinkPager')'. String value will be treated as the class
 name of the pager (''ClassName'' value is similar to the
 'array('class'=>'ClassName')' value). See |CBasePager| and |CLinkPager| for
 more details about pager configuration array values.

<pagerCssClass> 			*CBaseListView::pagerCssClass*
 (string) the CSS class name for the pager container. Defaults to 'pager'.

<skin>					*CBaseListView::skin*
 See |CWidget::skin|

<summaryCssClass>			*CBaseListView::summaryCssClass*
 (string) the CSS class name for the summary text container. Defaults to
 'summary'.

<summaryText>				*CBaseListView::summaryText*
 (string) the summary text template for the view. These tokens are recognized
 and will be replaced with the corresponding values:
   {start}: the starting row number (1-based) currently being
   displayed
   {end}: the ending row number (1-based) currently being displayed
   {count}: the total number of rows
   {page}: the page number (1-based) current being displayed,
   available since version 1.1.3
   {pages}: the total number of pages, available since version 1.1.3

<tagName>				*CBaseListView::tagName*
 (string) the tag name for the view container. Defaults to 'div'.

<template>				*CBaseListView::template*
 (string) the template to be used to control the layout of various sections in
 the view. These tokens are recognized: {summary}, {items} and {pager}. They
 will be replaced with the summary text, the items, and the pager.

<viewPath>				*CBaseListView::viewPath*
 See |CWidget::viewPath|



METHOD DETAILS
------------------------------------------------------------------------------

*CBaseListView::__call* 					 public
 See |CComponent::__call|


*CBaseListView::__construct*					 public
 See |CWidget::__construct|


*CBaseListView::__get*						 public
 See |CComponent::__get|


*CBaseListView::__isset*					 public
 See |CComponent::__isset|


*CBaseListView::__set*						 public
 See |CComponent::__set|


*CBaseListView::__unset*					 public
 See |CComponent::__unset|


*CBaseListView::actions*					 public
 See |CWidget::actions|


*CBaseListView::asa*						 public
 See |CComponent::asa|


*CBaseListView::attachBehavior* 				 public
 See |CComponent::attachBehavior|


*CBaseListView::attachBehaviors*				 public
 See |CComponent::attachBehaviors|


*CBaseListView::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CBaseListView::beginCache*					 public
 See |CBaseController::beginCache|


*CBaseListView::beginClip*					 public
 See |CBaseController::beginClip|


*CBaseListView::beginContent*					 public
 See |CBaseController::beginContent|


*CBaseListView::beginWidget*					 public
 See |CBaseController::beginWidget|


*CBaseListView::canGetProperty* 				 public
 See |CComponent::canGetProperty|


*CBaseListView::canSetProperty* 				 public
 See |CComponent::canSetProperty|


*CBaseListView::createWidget*					 public
 See |CBaseController::createWidget|


*CBaseListView::detachBehavior* 				 public
 See |CComponent::detachBehavior|


*CBaseListView::detachBehaviors*				 public
 See |CComponent::detachBehaviors|


*CBaseListView::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CBaseListView::disableBehavior*				 public
 See |CComponent::disableBehavior|


*CBaseListView::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CBaseListView::enableBehavior* 				 public
 See |CComponent::enableBehavior|


*CBaseListView::enableBehaviors*				 public
 See |CComponent::enableBehaviors|


*CBaseListView::endCache*					 public
 See |CBaseController::endCache|


*CBaseListView::endClip*					 public
 See |CBaseController::endClip|


*CBaseListView::endContent*					 public
 See |CBaseController::endContent|


*CBaseListView::endWidget*					 public
 See |CBaseController::endWidget|


*CBaseListView::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CBaseListView::getController*					 public
 See |CWidget::getController|


*CBaseListView::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CBaseListView::getId*						 public
 See |CWidget::getId|


*CBaseListView::getOwner*					 public
 See |CWidget::getOwner|


*CBaseListView::getViewFile*					 public
 See |CWidget::getViewFile|


*CBaseListView::getViewPath*					 public
 See |CWidget::getViewPath|


*CBaseListView::hasEvent*					 public
 See |CComponent::hasEvent|


*CBaseListView::hasEventHandler*				 public
 See |CComponent::hasEventHandler|


*CBaseListView::hasProperty*					 public
 See |CComponent::hasProperty|


*CBaseListView::init*						 public
>
 init()
<
(void)

 Initializes the view. This method will initialize required property values
 and instantiate columns objects.


*CBaseListView::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CBaseListView::registerClientScript*				 public
>
 registerClientScript()
<
(void)

 Registers necessary client scripts. This method is invoked by
 |CBaseListView::run|. Child classes may override this method to register
 customized client scripts.


*CBaseListView::render* 					 public
 See |CWidget::render|


*CBaseListView::renderContent*					 public
>
 renderContent()
<
(void)

 Renders the main content of the view. The content is divided into sections,
 such as summary, items, pager. Each section is rendered by a method named as
 "renderXyz", where "Xyz" is the section name. The rendering results will
 replace the corresponding placeholders in |CBaseListView::template|.


*CBaseListView::renderEmptyText*				 public
>
 renderEmptyText()
<
(void)

 Renders the empty message when there is no data.


*CBaseListView::renderFile*					 public
 See |CBaseController::renderFile|


*CBaseListView::renderInternal* 				 public
 See |CBaseController::renderInternal|


*CBaseListView::renderItems*					 public
>
 renderItems()
<
(void)

 Renders the data items for the view. Each item is corresponding to a single
 data model instance. Child classes should override this method to provide the
 actual item rendering logic.


*CBaseListView::renderKeys*					 public
>
 renderKeys()
<
(void)

 Renders the key values of the data in a hidden tag.


*CBaseListView::renderPager*					 public
>
 renderPager()
<
(void)

 Renders the pager.


*CBaseListView::renderSection*					 protected
>
 renderSection($matches)
<
(string) the rendering result of the section

 Renders a section. This method is invoked by |CBaseListView::renderContent|
 for every placeholder found in |CBaseListView::template|. It should return
 the rendering result that would replace the placeholder.
    [matches] (array) the matches, where $matches[0] represents the whole
    placeholder, while $matches[1] contains the name of the matched
    placeholder.


*CBaseListView::renderSummary*					 public
>
 renderSummary()
<
(void)

 Renders the summary text.


*CBaseListView::run*						 public
>
 run()
<
(void)

 Renders the view. This is the main entry of the whole view rendering. Child
 classes should mainly override |CBaseListView::renderContent| method.


*CBaseListView::setId*						 public
 See |CWidget::setId|


*CBaseListView::widget* 					 public
 See |CBaseController::widget|



 vim:tw=78:ts=8:ft=help:norl:
