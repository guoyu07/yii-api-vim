
*CBreadcrumbs*   >> |CWidget| >> |CBaseController| >> |CComponent|
==============

 CBreadcrumbs displays a list of links indicating the position of the current
 page in the whole website.

 For example, breadcrumbs like "Home > Sample Post > Edit" means the user is
 viewing an edit page for the "Sample Post". He can click on "Sample Post" to
 view that page, or he can click on "Home" to return to the homepage.

 To use CBreadcrumbs, one usually needs to configure its |CBreadcrumbs::links|
 property, which specifies the links to be displayed. For example,
>
 $this->widget('zii.widgets.CBreadcrumbs', array(
     'links'=>array(
         'Sample post'=>array('post/view', 'id'=>12),
         'Edit',
     ),
 ));
<
 Because breadcrumbs usually appears in nearly every page of a website, the
 widget is better to be placed in a layout view. One can define a property
 "breadcrumbs" in the base controller class and assign it to the widget in the
 layout, like the following:
>
 $this->widget('zii.widgets.CBreadcrumbs', array(
     'links'=>$this->breadcrumbs,
 ));
<
 Then, in each view script, one only needs to assign the "breadcrumbs"
 property as needed.


PROPERTY DETAILS
------------------------------------------------------------------------------

<actionPrefix>				*CBreadcrumbs::actionPrefix*
 See |CWidget::actionPrefix|

<activeLinkTemplate>			*CBreadcrumbs::activeLinkTemplate*
 (string) String, specifies how each active item is rendered. Defaults to
 "'{label}'", where "{label}" will be replaced by the corresponding item label
 while "{url}" will be replaced by the URL of the item.

<controller>				*CBreadcrumbs::controller*
 See |CWidget::controller|

<encodeLabel>				*CBreadcrumbs::encodeLabel*
 (boolean) whether to HTML encode the link labels. Defaults to true.

<homeLink>				*CBreadcrumbs::homeLink*
 (string) the first hyperlink in the breadcrumbs (called home link). If this
 property is not set, it defaults to a link pointing to
 |CWebApplication::homeUrl| with label 'Home'. If this property is false, the
 home link will not be rendered.

<htmlOptions>				*CBreadcrumbs::htmlOptions*
 (array) the HTML attributes for the breadcrumbs container tag.

<id>					*CBreadcrumbs::id*
 See |CWidget::id|

<inactiveLinkTemplate>			*CBreadcrumbs::inactiveLinkTemplate*
 (string) String, specifies how each inactive item is rendered. Defaults to
 "<span>{label}</span>", where "{label}" will be replaced by the corresponding
 item label. Note that inactive template does not have "{url}" parameter.

<links> 				*CBreadcrumbs::links*
 (array) list of hyperlinks to appear in the breadcrumbs. If this property is
 empty, the widget will not render anything. Each key-value pair in the array
 will be used to generate a hyperlink by calling CHtml::link(key, value). For
 this reason, the key refers to the label of the link while the value can be a
 string or an array (used to create a URL). For more details, please refer to
 |CHtml::link|. If an element's key is an integer, it means the element will
 be rendered as a label only (meaning the current page).

 The following example will generate breadcrumbs as "Home > Sample post >
 Edit", where "Home" points to the homepage, "Sample post" points to the
 "index.php?r=post/view&id=12" page, and "Edit" is a label. Note that the
 "Home" link is specified via |CBreadcrumbs::homeLink| separately.
>
 array(
     'Sample post'=>array('post/view', 'id'=>12),
     'Edit',
 )
<

<owner> 				*CBreadcrumbs::owner*
 See |CWidget::owner|

<separator>				*CBreadcrumbs::separator*
 (string) the separator between links in the breadcrumbs. Defaults to '
 &raquo; '.

<skin>					*CBreadcrumbs::skin*
 See |CWidget::skin|

<tagName>				*CBreadcrumbs::tagName*
 (string) the tag name for the breadcrumbs container tag. Defaults to 'div'.

<viewPath>				*CBreadcrumbs::viewPath*
 See |CWidget::viewPath|



METHOD DETAILS
------------------------------------------------------------------------------

*CBreadcrumbs::__call*						 public
 See |CComponent::__call|


*CBreadcrumbs::__construct*					 public
 See |CWidget::__construct|


*CBreadcrumbs::__get*						 public
 See |CComponent::__get|


*CBreadcrumbs::__isset* 					 public
 See |CComponent::__isset|


*CBreadcrumbs::__set*						 public
 See |CComponent::__set|


*CBreadcrumbs::__unset* 					 public
 See |CComponent::__unset|


*CBreadcrumbs::actions* 					 public
 See |CWidget::actions|


*CBreadcrumbs::asa*						 public
 See |CComponent::asa|


*CBreadcrumbs::attachBehavior*					 public
 See |CComponent::attachBehavior|


*CBreadcrumbs::attachBehaviors* 				 public
 See |CComponent::attachBehaviors|


*CBreadcrumbs::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CBreadcrumbs::beginCache*					 public
 See |CBaseController::beginCache|


*CBreadcrumbs::beginClip*					 public
 See |CBaseController::beginClip|


*CBreadcrumbs::beginContent*					 public
 See |CBaseController::beginContent|


*CBreadcrumbs::beginWidget*					 public
 See |CBaseController::beginWidget|


*CBreadcrumbs::canGetProperty*					 public
 See |CComponent::canGetProperty|


*CBreadcrumbs::canSetProperty*					 public
 See |CComponent::canSetProperty|


*CBreadcrumbs::createWidget*					 public
 See |CBaseController::createWidget|


*CBreadcrumbs::detachBehavior*					 public
 See |CComponent::detachBehavior|


*CBreadcrumbs::detachBehaviors* 				 public
 See |CComponent::detachBehaviors|


*CBreadcrumbs::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CBreadcrumbs::disableBehavior* 				 public
 See |CComponent::disableBehavior|


*CBreadcrumbs::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CBreadcrumbs::enableBehavior*					 public
 See |CComponent::enableBehavior|


*CBreadcrumbs::enableBehaviors* 				 public
 See |CComponent::enableBehaviors|


*CBreadcrumbs::endCache*					 public
 See |CBaseController::endCache|


*CBreadcrumbs::endClip* 					 public
 See |CBaseController::endClip|


*CBreadcrumbs::endContent*					 public
 See |CBaseController::endContent|


*CBreadcrumbs::endWidget*					 public
 See |CBaseController::endWidget|


*CBreadcrumbs::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CBreadcrumbs::getController*					 public
 See |CWidget::getController|


*CBreadcrumbs::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CBreadcrumbs::getId*						 public
 See |CWidget::getId|


*CBreadcrumbs::getOwner*					 public
 See |CWidget::getOwner|


*CBreadcrumbs::getViewFile*					 public
 See |CWidget::getViewFile|


*CBreadcrumbs::getViewPath*					 public
 See |CWidget::getViewPath|


*CBreadcrumbs::hasEvent*					 public
 See |CComponent::hasEvent|


*CBreadcrumbs::hasEventHandler* 				 public
 See |CComponent::hasEventHandler|


*CBreadcrumbs::hasProperty*					 public
 See |CComponent::hasProperty|


*CBreadcrumbs::init*						 public
 See |CWidget::init|


*CBreadcrumbs::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CBreadcrumbs::render*						 public
 See |CWidget::render|


*CBreadcrumbs::renderFile*					 public
 See |CBaseController::renderFile|


*CBreadcrumbs::renderInternal*					 public
 See |CBaseController::renderInternal|


*CBreadcrumbs::run*						 public
>
 run()
<
(void)

 Renders the content of the portlet.


*CBreadcrumbs::setId*						 public
 See |CWidget::setId|


*CBreadcrumbs::widget*						 public
 See |CBaseController::widget|



 vim:tw=78:ts=8:ft=help:norl:
