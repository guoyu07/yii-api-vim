
*CFileValidator*   >> |CValidator| >> |CComponent|
================

 CFileValidator verifies if an attribute is receiving a valid uploaded file.

 It uses the model class and attribute name to retrieve the information about
 the uploaded file. It then checks if a file is uploaded successfully, if the
 file size is within the limit and if the file type is allowed.

 This validator will attempt to fetch uploaded data if attribute is not
 previously set. Please note that this cannot be done if input is tabular:
>
  foreach($models as $i=>$model)
     $model->attribute = CUploadedFile::getInstance($model, "[$i]attribute");
<
 Please note that you must use |CUploadedFile::getInstances| for multiple file
 uploads.

 When using CFileValidator with an active record, the following code is often
 used:
>
  if($model->save())
  {
     // single upload
     $model->attribute->saveAs($path);
     // multiple upload
     foreach($model->attribute as $file)
        $file->saveAs($path);
  }
<
 You can use |CFileValidator| to validate the file attribute.

 In addition to the |CFileValidator::message| property for setting a custom
 error message, CFileValidator has a few custom error messages you can set
 that correspond to different validation scenarios. When the file is too
 large, you may use the |CFileValidator::tooLarge| property to define a custom
 error message. Similarly for |CFileValidator::tooSmall|,
 |CFileValidator::wrongType| and |CFileValidator::tooMany|. The messages may
 contain additional placeholders that will be replaced with the actual
 content. In addition to the "{attribute}" placeholder, recognized by all
 validators (see |CValidator|), CFileValidator allows for the following
 placeholders to be specified:
   {file}: replaced with the name of the file.
   {limit}: when using |CFileValidator::tooLarge|, replaced with
   |CFileValidator::maxSize|; when using |CFileValidator::tooSmall|,
   replaced with |CFileValidator::minSize|; and when using
   |CFileValidator::tooMany| replaced with
   |CFileValidator::maxFiles|.
   {extensions}: when using |CFileValidator::wrongType|, it will be
   replaced with the allowed extensions.


PROPERTY DETAILS
------------------------------------------------------------------------------

<allowEmpty>				*CFileValidator::allowEmpty*
 (boolean) whether the attribute requires a file to be uploaded or not.
 Defaults to false, meaning a file is required to be uploaded.

<attributes>				*CFileValidator::attributes*
 See |CValidator::attributes|

<builtInValidators>			*CFileValidator::builtInValidators*
 See |CValidator::builtInValidators|

<enableClientValidation>		*CFileValidator::enableClientValidation*
 See |CValidator::enableClientValidation|

<except>				*CFileValidator::except*
 See |CValidator::except|

<maxFiles>				*CFileValidator::maxFiles*
 (integer) the maximum file count the given attribute can hold. It defaults to
 1, meaning single file upload. By defining a higher number, multiple uploads
 become possible.

<maxSize>				*CFileValidator::maxSize*
 (integer) the maximum number of bytes required for the uploaded file.
 Defaults to null, meaning no limit. Note, the size limit is also affected by
 'upload_max_filesize' INI setting and the 'MAX_FILE_SIZE' hidden field value.

<message>				*CFileValidator::message*
 See |CValidator::message|

<mimeTypes>				*CFileValidator::mimeTypes*
 (mixed) a list of MIME-types of the file that are allowed to be uploaded.
 This can be either an array or a string consisting of MIME-types separated by
 space or comma (e.g. "image/gif, image/jpeg"). MIME-types are
 case-insensitive. Defaults to null, meaning all MIME-types are allowed. In
 order to use this property fileinfo PECL extension should be installed.

<minSize>				*CFileValidator::minSize*
 (integer) the minimum number of bytes required for the uploaded file.
 Defaults to null, meaning no limit.

<on>					*CFileValidator::on*
 See |CValidator::on|

<safe>					*CFileValidator::safe*
 (boolean) whether attributes listed with this validator should be considered
 safe for massive assignment. For this validator it defaults to false.

<sizeLimit>				*CFileValidator::sizeLimit*
 (integer) Returns the maximum size allowed for uploaded files. This is
 determined based on three factors:
   'upload_max_filesize' in php.ini
   'MAX_FILE_SIZE' hidden field
   |CFileValidator::maxSize|

<skipOnError>				*CFileValidator::skipOnError*
 See |CValidator::skipOnError|

<tooLarge>				*CFileValidator::tooLarge*
 (string) the error message used when the uploaded file is too large.

<tooMany>				*CFileValidator::tooMany*
 (string) the error message used if the count of multiple uploads exceeds
 limit.

<tooSmall>				*CFileValidator::tooSmall*
 (string) the error message used when the uploaded file is too small.

<types> 				*CFileValidator::types*
 (mixed) a list of file name extensions that are allowed to be uploaded. This
 can be either an array or a string consisting of file extension names
 separated by space or comma (e.g. "gif, jpg"). Extension names are
 case-insensitive. Defaults to null, meaning all file name extensions are
 allowed.

<wrongMimeType> 			*CFileValidator::wrongMimeType*
 (string) the error message used when the uploaded file has a MIME-type that
 is not listed among |CFileValidator::mimeTypes|. In order to use this
 property fileinfo PECL extension should be installed.

<wrongType>				*CFileValidator::wrongType*
 (string) the error message used when the uploaded file has an extension name
 that is not listed among |CFileValidator::types|.



METHOD DETAILS
------------------------------------------------------------------------------

*CFileValidator::__call*					 public
 See |CComponent::__call|


*CFileValidator::__get* 					 public
 See |CComponent::__get|


*CFileValidator::__isset*					 public
 See |CComponent::__isset|


*CFileValidator::__set* 					 public
 See |CComponent::__set|


*CFileValidator::__unset*					 public
 See |CComponent::__unset|


*CFileValidator::addError*					 protected
 See |CValidator::addError|


*CFileValidator::applyTo*					 public
 See |CValidator::applyTo|


*CFileValidator::asa*						 public
 See |CComponent::asa|


*CFileValidator::attachBehavior*				 public
 See |CComponent::attachBehavior|


*CFileValidator::attachBehaviors*				 public
 See |CComponent::attachBehaviors|


*CFileValidator::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CFileValidator::canGetProperty*				 public
 See |CComponent::canGetProperty|


*CFileValidator::canSetProperty*				 public
 See |CComponent::canSetProperty|


*CFileValidator::clientValidateAttribute*			 public
 See |CValidator::clientValidateAttribute|


*CFileValidator::createValidator*				 public
 See |CValidator::createValidator|


*CFileValidator::detachBehavior*				 public
 See |CComponent::detachBehavior|


*CFileValidator::detachBehaviors*				 public
 See |CComponent::detachBehaviors|


*CFileValidator::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CFileValidator::disableBehavior*				 public
 See |CComponent::disableBehavior|


*CFileValidator::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CFileValidator::emptyAttribute*				 protected
>
 emptyAttribute($object, $attribute)
<
(void)

 Raises an error to inform end user about blank attribute.
    [object] (CModel) the object being validated
    [attribute] (string) the attribute being validated


*CFileValidator::enableBehavior*				 public
 See |CComponent::enableBehavior|


*CFileValidator::enableBehaviors*				 public
 See |CComponent::enableBehaviors|


*CFileValidator::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CFileValidator::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CFileValidator::getSizeLimit*					 protected
>
 getSizeLimit()
<
(integer) the size limit for uploaded files.

 Returns the maximum size allowed for uploaded files. This is determined based
 on three factors:
   'upload_max_filesize' in php.ini
   'MAX_FILE_SIZE' hidden field
   |CFileValidator::maxSize|


*CFileValidator::hasEvent*					 public
 See |CComponent::hasEvent|


*CFileValidator::hasEventHandler*				 public
 See |CComponent::hasEventHandler|


*CFileValidator::hasProperty*					 public
 See |CComponent::hasProperty|


*CFileValidator::isEmpty*					 protected
 See |CValidator::isEmpty|


*CFileValidator::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CFileValidator::sizeToBytes*					 public
>
 sizeToBytes($sizeStr)
<
(integer) the byte count in the given size string.

 Converts php.ini style size to bytes. Examples of size strings are: 150, 1g,
 500k, 5M (size suffix is case insensitive). If you pass here the number with
 a fractional part, then everything after the decimal point will be ignored
 (php.ini values common behavior). For example 1.5G value would be treated as
 1G and 1073741824 number will be returned as a result. This method is public
 (was private before) since 1.1.11.
    [sizeStr] (string) the size string to convert.


*CFileValidator::validate*					 public
 See |CValidator::validate|


*CFileValidator::validateAttribute*				 protected
>
 validateAttribute($object, $attribute)
<
(void)

 Set the attribute and then validates using |CFileValidator::validateFile|. If
 there is any error, the error message is added to the object.
    [object] (CModel) the object being validated
    [attribute] (string) the attribute being validated


*CFileValidator::validateFile*					 protected
>
 validateFile($object, $attribute, $file)
<
(void)

 Internally validates a file object.
    [object] (CModel) the object being validated
    [attribute] (string) the attribute being validated
    [file] (CUploadedFile) uploaded file passed to check against a set of
    rules



 vim:tw=78:ts=8:ft=help:norl:
