
*CSecurityManager*   >> |CApplicationComponent| >> |CComponent|
==================

 CSecurityManager provides private keys, hashing and encryption functions.

 CSecurityManager is used by Yii components and applications for
 security-related purpose. For example, it is used in cookie validation
 feature to prevent cookie data from being tampered.

 CSecurityManager is mainly used to protect data from being tampered and
 viewed. It can generate HMAC and encrypt the data. The private key used to
 generate HMAC is set by |CSecurityManager::setValidationKey|. The key used to
 encrypt data is specified by |CSecurityManager::setEncryptionKey|. If the
 above keys are not explicitly set, random keys will be generated and used.

 To protected data with HMAC, call |CSecurityManager::hashData|; and to check
 if the data is tampered, call |CSecurityManager::validateData|, which will
 return the real data if it is not tampered. The algorithm used to generated
 HMAC is specified by |CSecurityManager::validation|.

 To encrypt and decrypt data, call |CSecurityManager::encrypt| and
 |CSecurityManager::decrypt| respectively, which uses 3DES encryption
 algorithm.  Note, the PHP Mcrypt extension must be installed and loaded.

 CSecurityManager is a core application component that can be accessed via
 |CApplication::getSecurityManager|.


PROPERTY DETAILS
------------------------------------------------------------------------------

<behaviors>				*CSecurityManager::behaviors*
 See |CApplicationComponent::behaviors|

<cryptAlgorithm>			*CSecurityManager::cryptAlgorithm*
 (mixed) the name of the crypt algorithm to be used by
 |CSecurityManager::encrypt| and |CSecurityManager::decrypt|. This will be
 passed as the first parameter to 'mcrypt_module_open'.

 This property can also be configured as an array. In this case, the array
 elements will be passed in order as parameters to mcrypt_module_open. For
 example, 'array('rijndael-256', '', 'ofb', '')'.

 Defaults to 'des', meaning using DES crypt algorithm.

<encryptionKey> 			*CSecurityManager::encryptionKey*
 (string) the private key used to encrypt/decrypt data. If the key is not
 explicitly set, a random one is generated and returned.

<hashAlgorithm> 			*CSecurityManager::hashAlgorithm*
 (string) the name of the hashing algorithm to be used by
 |CSecurityManager::computeHMAC|. See 'hash-algos' for the list of possible
 hash algorithms. Note that if you are using PHP 5.1.1 or below, you can only
 use 'sha1' or 'md5'.

 Defaults to 'sha1', meaning using SHA1 hash algorithm.

<isInitialized> 			*CSecurityManager::isInitialized*
 See |CApplicationComponent::isInitialized|

<validation>				*CSecurityManager::validation*
 (string) This method has been deprecated since version 1.1.3. Please use
 |CSecurityManager::hashAlgorithm| instead.

<validationKey> 			*CSecurityManager::validationKey*
 (string) the private key used to generate HMAC. If the key is not explicitly
 set, a random one is generated and returned.



METHOD DETAILS
------------------------------------------------------------------------------

*CSecurityManager::__call*					 public
 See |CComponent::__call|


*CSecurityManager::__get*					 public
 See |CComponent::__get|


*CSecurityManager::__isset*					 public
 See |CComponent::__isset|


*CSecurityManager::__set*					 public
 See |CComponent::__set|


*CSecurityManager::__unset*					 public
 See |CComponent::__unset|


*CSecurityManager::asa* 					 public
 See |CComponent::asa|


*CSecurityManager::attachBehavior*				 public
 See |CComponent::attachBehavior|


*CSecurityManager::attachBehaviors*				 public
 See |CComponent::attachBehaviors|


*CSecurityManager::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CSecurityManager::canGetProperty*				 public
 See |CComponent::canGetProperty|


*CSecurityManager::canSetProperty*				 public
 See |CComponent::canSetProperty|


*CSecurityManager::computeHMAC* 				 public
>
 computeHMAC($data, $key=NULL, $hashAlgorithm=NULL)
<
(string) the HMAC for the data.

 Computes the HMAC for the data with |CSecurityManager::getValidationKey|.
 This method has been made public since 1.1.14.
    [data] (string) data to be generated HMAC.
    [key] (string|null) the private key to be used for generating HMAC.
    Defaults to null, meaning using |CSecurityManager::validationKey| value.
    [hashAlgorithm] (string|null) the name of the hashing algorithm to be
    used. See 'hash-algos' for the list of possible hash algorithms. Note that
    if you are using PHP 5.1.1 or below, you can only use 'sha1' or 'md5'.
    Defaults to null, meaning using |CSecurityManager::hashAlgorithm| value.


*CSecurityManager::decrypt*					 public
>
 decrypt($data, $key='')
<
(string) the decrypted data

 Decrypts data
    [data] (string) data to be decrypted.
    [key] (string) the decryption key. This defaults to null, meaning using
    |CSecurityManager::getEncryptionKey|.


*CSecurityManager::detachBehavior*				 public
 See |CComponent::detachBehavior|


*CSecurityManager::detachBehaviors*				 public
 See |CComponent::detachBehaviors|


*CSecurityManager::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CSecurityManager::disableBehavior*				 public
 See |CComponent::disableBehavior|


*CSecurityManager::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CSecurityManager::enableBehavior*				 public
 See |CComponent::enableBehavior|


*CSecurityManager::enableBehaviors*				 public
 See |CComponent::enableBehaviors|


*CSecurityManager::encrypt*					 public
>
 encrypt($data, $key='')
<
(string) the encrypted data

 Encrypts data.
    [data] (string) data to be encrypted.
    [key] (string) the decryption key. This defaults to null, meaning using
    |CSecurityManager::getEncryptionKey|.


*CSecurityManager::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CSecurityManager::generatePseudoRandomBlock*			 public
>
 generatePseudoRandomBlock()
<
(string) of 64 pseudo random bytes.

 Generate a pseudo random block of data using several sources. On some systems
 this may be a bit better than PHP's mt_rand built-in function, which is not
 really random.


*CSecurityManager::generateRandomBytes* 			 public
>
 generateRandomBytes($length, $cryptographicallyStrong=true)
<
(boolean|string) generated random binary string or false on failure.

 Generates a string of random bytes.
    [length] (integer) number of random bytes to be generated.
    [cryptographicallyStrong] (boolean) whether to fail if a cryptographically
    strong result cannot be generated. The method attempts to read from a
    cryptographically strong pseudorandom number generator (CS-PRNG), see
    Wikipedia. However, in some runtime environments, PHP has no access to a
    CS-PRNG, in which case the method returns false if
    $cryptographicallyStrong is true. When $cryptographicallyStrong is false,
    the method always returns a pseudorandom result but may fall back to using
    |CSecurityManager::generatePseudoRandomBlock|. This method does not
    guarantee that entropy, from sources external to the CS-PRNG, was mixed
    into the CS-PRNG state between each successive call. The caller can
    therefore expect non-blocking behavior, unlike, for example, reading from
    /dev/random on Linux, see 'Gutterman et al 2006'.


*CSecurityManager::generateRandomKey*				 protected
>
 generateRandomKey()
<
(string) a randomly generated private key.



*CSecurityManager::generateRandomString*			 public
>
 generateRandomString($length, $cryptographicallyStrong=true)
<
(string|boolean) random string or false in case it cannot be generated.

 Generate a random ASCII string. Generates only [0-9a-zA-z_~] characters which
 are all transparent in raw URL encoding.
    [length] (integer) length of the generated string in characters.
    [cryptographicallyStrong] (boolean) set this to require cryptographically
    strong randomness.


*CSecurityManager::generateSessionRandomBlock*			 public
>
 generateSessionRandomBlock()
<
(boolean|string) 20-byte random binary string or false on error.

 Get random bytes from the system entropy source via PHP session manager.


*CSecurityManager::getEncryptionKey*				 public
>
 getEncryptionKey()
<
(string) the private key used to encrypt/decrypt data. If the key is not
explicitly set, a random one is generated and returned.



*CSecurityManager::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CSecurityManager::getIsInitialized*				 public
 See |CApplicationComponent::getIsInitialized|


*CSecurityManager::getValidation*				 public
>
 getValidation()
<
(string) -

 This method has been deprecated since version 1.1.3. Please use
 |CSecurityManager::hashAlgorithm| instead.


*CSecurityManager::getValidationKey*				 public
>
 getValidationKey()
<
(string) the private key used to generate HMAC. If the key is not explicitly
set, a random one is generated and returned.



*CSecurityManager::hasEvent*					 public
 See |CComponent::hasEvent|


*CSecurityManager::hasEventHandler*				 public
 See |CComponent::hasEventHandler|


*CSecurityManager::hasProperty* 				 public
 See |CComponent::hasProperty|


*CSecurityManager::hashData*					 public
>
 hashData($data, $key='')
<
(string) data prefixed with HMAC

 Prefixes data with an HMAC.
    [data] (string) data to be hashed.
    [key] (string) the private key to be used for generating HMAC. Defaults to
    null, meaning using |CSecurityManager::validationKey|.


*CSecurityManager::init*					 public
>
 init()
<
(void)



*CSecurityManager::openCryptModule*				 protected
>
 openCryptModule()
<
(resource) the mycrypt module handle.

 Opens the mcrypt module with the configuration specified in
 |CSecurityManager::cryptAlgorithm|.


*CSecurityManager::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CSecurityManager::setEncryptionKey*				 public
>
 setEncryptionKey($value)
<
(void)

    [value] (string) the key used to encrypt/decrypt data.


*CSecurityManager::setValidation*				 public
>
 setValidation($value)
<
(void)

 This method has been deprecated since version 1.1.3. Please use
 |CSecurityManager::hashAlgorithm| instead.
    [value] (string) -


*CSecurityManager::setValidationKey*				 public
>
 setValidationKey($value)
<
(void)

    [value] (string) the key used to generate HMAC


*CSecurityManager::validateData*				 public
>
 validateData($data, $key='')
<
(string) the real data with HMAC stripped off. False if the data is tampered.

 Validates if data is tampered.
    [data] (string) data to be validated. The data must be previously
    generated using |CSecurityManager::hashData|.
    [key] (string) the private key to be used for generating HMAC. Defaults to
    null, meaning using |CSecurityManager::validationKey|.



 vim:tw=78:ts=8:ft=help:norl:
