
*CWebModule*   >> |CModule| >> |CComponent|
============

 CWebModule represents an application module.

 An application module may be considered as a self-contained sub-application
 that has its own controllers, models and views and can be reused in a
 different project as a whole. Controllers inside a module must be accessed
 with routes that are prefixed with the module ID.


PROPERTY DETAILS
------------------------------------------------------------------------------

<basePath>				*CWebModule::basePath*
 See |CModule::basePath|

<behaviors>				*CWebModule::behaviors*
 See |CModule::behaviors|

<components>				*CWebModule::components*
 See |CModule::components|

<controllerMap> 			*CWebModule::controllerMap*
 (array) mapping from controller ID to controller configurations. Pleaser
 refer to |CWebApplication::controllerMap| for more details.

<controllerNamespace>			*CWebModule::controllerNamespace*
 (string) Namespace that should be used when loading controllers. Default is
 to use global namespace.

<controllerPath>			*CWebModule::controllerPath*
 (string) the directory that contains the controller classes. Defaults to
 'moduleDir/controllers' where moduleDir is the directory containing the
 module class.

<defaultController>			*CWebModule::defaultController*
 (string) the ID of the default controller for this module. Defaults to
 'default'.

<description>				*CWebModule::description*
 (string) Returns the description of this module. The default implementation
 returns an empty string. You may override this method to customize the
 description of this module.

<id>					*CWebModule::id*
 See |CModule::id|

<layout>				*CWebModule::layout*
 (mixed) the layout that is shared by the controllers inside this module. If a
 controller has explicitly declared its own |CController::layout|, this
 property will be ignored. If this is null (default), the application's layout
 or the parent module's layout (if available) will be used. If this is false,
 then no layout will be used.

<layoutPath>				*CWebModule::layoutPath*
 (string) the root directory of layout files. Defaults to
 'moduleDir/views/layouts' where moduleDir is the directory containing the
 module class.

<modulePath>				*CWebModule::modulePath*
 See |CModule::modulePath|

<modules>				*CWebModule::modules*
 See |CModule::modules|

<name>					*CWebModule::name*
 (string) Returns the name of this module. The default implementation simply
 returns |CWebModule::id|. You may override this method to customize the name
 of this module.

<params>				*CWebModule::params*
 See |CModule::params|

<parentModule>				*CWebModule::parentModule*
 See |CModule::parentModule|

<preload>				*CWebModule::preload*
 See |CModule::preload|

<version>				*CWebModule::version*
 (string) Returns the version of this module. The default implementation
 returns '1.0'. You may override this method to customize the version of this
 module.

<viewPath>				*CWebModule::viewPath*
 (string) the root directory of view files. Defaults to 'moduleDir/views'
 where moduleDir is the directory containing the module class.



METHOD DETAILS
------------------------------------------------------------------------------

*CWebModule::__call*						 public
 See |CComponent::__call|


*CWebModule::__construct*					 public
 See |CModule::__construct|


*CWebModule::__get*						 public
 See |CModule::__get|


*CWebModule::__isset*						 public
 See |CModule::__isset|


*CWebModule::__set*						 public
 See |CComponent::__set|


*CWebModule::__unset*						 public
 See |CComponent::__unset|


*CWebModule::afterControllerAction*				 public
>
 afterControllerAction($controller, $action)
<
(void)

 The post-filter for controller actions. This method is invoked after the
 currently requested controller action and all its filters are executed. If
 you override this method, make sure you call the parent implementation at the
 end.
    [controller] (CController) the controller
    [action] (CAction) the action


*CWebModule::asa*						 public
 See |CComponent::asa|


*CWebModule::attachBehavior*					 public
 See |CComponent::attachBehavior|


*CWebModule::attachBehaviors*					 public
 See |CComponent::attachBehaviors|


*CWebModule::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CWebModule::beforeControllerAction*				 public
>
 beforeControllerAction($controller, $action)
<
(boolean) whether the action should be executed.

 The pre-filter for controller actions. This method is invoked before the
 currently requested controller action and all its filters are executed. You
 may override this method in the following way:
>
 if(parent::beforeControllerAction($controller,$action))
 {
     // your code
     return true;
 }
 else
     return false;
<
    [controller] (CController) the controller
    [action] (CAction) the action


*CWebModule::canGetProperty*					 public
 See |CComponent::canGetProperty|


*CWebModule::canSetProperty*					 public
 See |CComponent::canSetProperty|


*CWebModule::configure* 					 public
 See |CModule::configure|


*CWebModule::detachBehavior*					 public
 See |CComponent::detachBehavior|


*CWebModule::detachBehaviors*					 public
 See |CComponent::detachBehaviors|


*CWebModule::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CWebModule::disableBehavior*					 public
 See |CComponent::disableBehavior|


*CWebModule::disableBehaviors*					 public
 See |CComponent::disableBehaviors|


*CWebModule::enableBehavior*					 public
 See |CComponent::enableBehavior|


*CWebModule::enableBehaviors*					 public
 See |CComponent::enableBehaviors|


*CWebModule::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CWebModule::getBasePath*					 public
 See |CModule::getBasePath|


*CWebModule::getComponent*					 public
 See |CModule::getComponent|


*CWebModule::getComponents*					 public
 See |CModule::getComponents|


*CWebModule::getControllerPath* 				 public
>
 getControllerPath()
<
(string) the directory that contains the controller classes. Defaults to
'moduleDir/controllers' where moduleDir is the directory containing the module
class.



*CWebModule::getDescription*					 public
>
 getDescription()
<
(string) the description of this module.

 Returns the description of this module. The default implementation returns an
 empty string. You may override this method to customize the description of
 this module.


*CWebModule::getEventHandlers*					 public
 See |CComponent::getEventHandlers|


*CWebModule::getId*						 public
 See |CModule::getId|


*CWebModule::getLayoutPath*					 public
>
 getLayoutPath()
<
(string) the root directory of layout files. Defaults to
'moduleDir/views/layouts' where moduleDir is the directory containing the
module class.



*CWebModule::getModule* 					 public
 See |CModule::getModule|


*CWebModule::getModulePath*					 public
 See |CModule::getModulePath|


*CWebModule::getModules*					 public
 See |CModule::getModules|


*CWebModule::getName*						 public
>
 getName()
<
(string) the name of this module.

 Returns the name of this module. The default implementation simply returns
 |CWebModule::id|. You may override this method to customize the name of this
 module.


*CWebModule::getParams* 					 public
 See |CModule::getParams|


*CWebModule::getParentModule*					 public
 See |CModule::getParentModule|


*CWebModule::getVersion*					 public
>
 getVersion()
<
(string) the version of this module.

 Returns the version of this module. The default implementation returns '1.0'.
 You may override this method to customize the version of this module.


*CWebModule::getViewPath*					 public
>
 getViewPath()
<
(string) the root directory of view files. Defaults to 'moduleDir/views' where
moduleDir is the directory containing the module class.



*CWebModule::hasComponent*					 public
 See |CModule::hasComponent|


*CWebModule::hasEvent*						 public
 See |CComponent::hasEvent|


*CWebModule::hasEventHandler*					 public
 See |CComponent::hasEventHandler|


*CWebModule::hasModule* 					 public
 See |CModule::hasModule|


*CWebModule::hasProperty*					 public
 See |CComponent::hasProperty|


*CWebModule::init*						 protected
 See |CModule::init|


*CWebModule::preinit*						 protected
 See |CModule::preinit|


*CWebModule::preloadComponents* 				 protected
 See |CModule::preloadComponents|


*CWebModule::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CWebModule::setAliases*					 public
 See |CModule::setAliases|


*CWebModule::setBasePath*					 public
 See |CModule::setBasePath|


*CWebModule::setComponent*					 public
 See |CModule::setComponent|


*CWebModule::setComponents*					 public
 See |CModule::setComponents|


*CWebModule::setControllerPath* 				 public
>
 setControllerPath($value)
<
(void)

    [value] (string) the directory that contains the controller classes.


*CWebModule::setId*						 public
 See |CModule::setId|


*CWebModule::setImport* 					 public
 See |CModule::setImport|


*CWebModule::setLayoutPath*					 public
>
 setLayoutPath($path)
<
(void)

    [path] (string) the root directory of layout files.


*CWebModule::setModulePath*					 public
 See |CModule::setModulePath|


*CWebModule::setModules*					 public
 See |CModule::setModules|


*CWebModule::setParams* 					 public
 See |CModule::setParams|


*CWebModule::setViewPath*					 public
>
 setViewPath($path)
<
(void)

    [path] (string) the root directory of view files.



 vim:tw=78:ts=8:ft=help:norl:
