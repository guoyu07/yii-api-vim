
*CConsoleCommandRunner*   >> |CComponent|
=======================

 CConsoleCommandRunner manages commands and executes the requested command.


PROPERTY DETAILS
------------------------------------------------------------------------------

<command>				*CConsoleCommandRunner::command*
 (CConsoleCommand|null) Returns the currently running command.

<commands>				*CConsoleCommandRunner::commands*
 (array) list of all available commands (command name=>command configuration).
 Each command configuration can be either a string or an array. If the former,
 the string should be the class name or |YiiBase::getPathOfAlias| of the
 command. If the latter, the array must contain a 'class' element which
 specifies the command's class name or |YiiBase::getPathOfAlias|. The rest
 name-value pairs in the array are used to initialize the corresponding
 command properties. For example,
>
 array(
   'email'=>array(
      'class'=>'path.to.Mailer',
      'interval'=>3600,
   ),
   'log'=>'path.to.LoggerCommand',
 )
<

<scriptName>				*CConsoleCommandRunner::scriptName*
 (string) the entry script name



METHOD DETAILS
------------------------------------------------------------------------------

*CConsoleCommandRunner::__call* 				 public
 See |CComponent::__call|


*CConsoleCommandRunner::__get*					 public
 See |CComponent::__get|


*CConsoleCommandRunner::__isset*				 public
 See |CComponent::__isset|


*CConsoleCommandRunner::__set*					 public
 See |CComponent::__set|


*CConsoleCommandRunner::__unset*				 public
 See |CComponent::__unset|


*CConsoleCommandRunner::addCommands*				 public
>
 addCommands($path)
<
(void)

 Adds commands from the specified command path. If a command already exists,
 the new one will be ignored.
    [path] (string) the alias of the directory containing the command class
    files.


*CConsoleCommandRunner::asa*					 public
 See |CComponent::asa|


*CConsoleCommandRunner::attachBehavior* 			 public
 See |CComponent::attachBehavior|


*CConsoleCommandRunner::attachBehaviors*			 public
 See |CComponent::attachBehaviors|


*CConsoleCommandRunner::attachEventHandler*			 public
 See |CComponent::attachEventHandler|


*CConsoleCommandRunner::canGetProperty* 			 public
 See |CComponent::canGetProperty|


*CConsoleCommandRunner::canSetProperty* 			 public
 See |CComponent::canSetProperty|


*CConsoleCommandRunner::createCommand*				 public
>
 createCommand($name)
<
(CConsoleCommand) the command object. Null if the name is invalid.

    [name] (string) command name (case-insensitive)


*CConsoleCommandRunner::detachBehavior* 			 public
 See |CComponent::detachBehavior|


*CConsoleCommandRunner::detachBehaviors*			 public
 See |CComponent::detachBehaviors|


*CConsoleCommandRunner::detachEventHandler*			 public
 See |CComponent::detachEventHandler|


*CConsoleCommandRunner::disableBehavior*			 public
 See |CComponent::disableBehavior|


*CConsoleCommandRunner::disableBehaviors*			 public
 See |CComponent::disableBehaviors|


*CConsoleCommandRunner::enableBehavior* 			 public
 See |CComponent::enableBehavior|


*CConsoleCommandRunner::enableBehaviors*			 public
 See |CComponent::enableBehaviors|


*CConsoleCommandRunner::evaluateExpression*			 public
 See |CComponent::evaluateExpression|


*CConsoleCommandRunner::findCommands*				 public
>
 findCommands($path)
<
(array) list of commands (command name=>command class file)

 Searches for commands under the specified directory.
    [path] (string) the directory containing the command class files.


*CConsoleCommandRunner::getCommand*				 public
>
 getCommand()
<
(CConsoleCommand|null) the currently active command.

 Returns the currently running command.


*CConsoleCommandRunner::getEventHandlers*			 public
 See |CComponent::getEventHandlers|


*CConsoleCommandRunner::getScriptName*				 public
>
 getScriptName()
<
(string) the entry script name



*CConsoleCommandRunner::hasEvent*				 public
 See |CComponent::hasEvent|


*CConsoleCommandRunner::hasEventHandler*			 public
 See |CComponent::hasEventHandler|


*CConsoleCommandRunner::hasProperty*				 public
 See |CComponent::hasProperty|


*CConsoleCommandRunner::raiseEvent*				 public
 See |CComponent::raiseEvent|


*CConsoleCommandRunner::run*					 public
>
 run($args)
<
(integer|null) application exit code returned by the command. if null is
returned, application will not exit explicitly. See also
|CConsoleApplication::processRequest|. (return value is available since
version 1.1.11)

 Executes the requested command.
    [args] (array) list of user supplied parameters (including the entry
    script name and the command name).


*CConsoleCommandRunner::setCommand*				 public
>
 setCommand($value)
<
(void)

    [value] (CConsoleCommand) the currently active command.



 vim:tw=78:ts=8:ft=help:norl:
