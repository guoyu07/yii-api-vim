
*CConsoleCommand*   >> |CComponent|
=================

 CConsoleCommand represents an executable console command.

 It works like |CController| by parsing command line options and dispatching
 the request to a specific action with appropriate option values.

 Users call a console command via the following command format:
>
 yiic CommandName ActionName --Option1=Value1 --Option2=Value2 ...
<
 Child classes mainly needs to implement various action methods whose name
 must be prefixed with "action". The parameters to an action method are
 considered as options for that specific action. The action specified as
 |CConsoleCommand::defaultAction| will be invoked when a user does not specify
 the action name in his command.

 Options are bound to action parameters via parameter names. For example, the
 following action method will allow us to run a command with 'yiic sitemap
 --type=News':
>
 class SitemapCommand extends CConsoleCommand {
     public function actionIndex($type) {
         ....
     }
 }
<
 Since version 1.1.11 the return value of action methods will be used as
 application exit code if it is an integer value.


PROPERTY DETAILS
------------------------------------------------------------------------------

<commandRunner> 			*CConsoleCommand::commandRunner*
 (CConsoleCommandRunner) the command runner instance

<defaultAction> 			*CConsoleCommand::defaultAction*
 (string) the name of the default action. Defaults to 'index'.

<help>					*CConsoleCommand::help*
 (string) Provides the command description. This method may be overridden to
 return the actual command description.

<name>					*CConsoleCommand::name*
 (string) the command name.

<optionHelp>				*CConsoleCommand::optionHelp*
 (array) Provides the command option help information. The default
 implementation will return all available actions together with their
 corresponding option information.



METHOD DETAILS
------------------------------------------------------------------------------

*CConsoleCommand::__call*					 public
 See |CComponent::__call|


*CConsoleCommand::__construct*					 public
>
 __construct($name, $runner)
<
(void)

 Constructor.
    [name] (string) name of the command
    [runner] (CConsoleCommandRunner) the command runner


*CConsoleCommand::__get*					 public
 See |CComponent::__get|


*CConsoleCommand::__isset*					 public
 See |CComponent::__isset|


*CConsoleCommand::__set*					 public
 See |CComponent::__set|


*CConsoleCommand::__unset*					 public
 See |CComponent::__unset|


*CConsoleCommand::afterAction*					 protected
>
 afterAction($action, $params, $exitCode=0)
<
(integer) application exit code (return value is available since version
1.1.11)

 This method is invoked right after an action finishes execution. You may
 override this method to do some postprocessing for the action.
    [action] (string) the action name
    [params] (array) the parameters to be passed to the action method.
    [exitCode] (integer) the application exit code returned by the action
    method.


*CConsoleCommand::asa*						 public
 See |CComponent::asa|


*CConsoleCommand::attachBehavior*				 public
 See |CComponent::attachBehavior|


*CConsoleCommand::attachBehaviors*				 public
 See |CComponent::attachBehaviors|


*CConsoleCommand::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CConsoleCommand::beforeAction* 				 protected
>
 beforeAction($action, $params)
<
(boolean) whether the action should be executed.

 This method is invoked right before an action is to be executed. You may
 override this method to do last-minute preparation for the action.
    [action] (string) the action name
    [params] (array) the parameters to be passed to the action method.


*CConsoleCommand::behaviors*					 public
>
 behaviors()
<
(array) the behavior configurations (behavior name=>behavior configuration)

 Returns a list of behaviors that this command should behave as. The return
 value should be an array of behavior configurations indexed by behavior
 names. Each behavior configuration can be either a string specifying the
 behavior class or an array of the following structure:
>
 'behaviorName'=>array(
     'class'=>'path.to.BehaviorClass',
     'property1'=>'value1',
     'property2'=>'value2',
 )
<
 Note, the behavior classes must implement |IBehavior| or extend from
 |CBehavior|. Behaviors declared in this method will be attached to the
 controller when it is instantiated.

 For more details about behaviors, see |CComponent|.


*CConsoleCommand::buildFileList*				 public
>
 buildFileList($sourceDir, $targetDir, $baseDir='', $ignoreFiles=array(), $renameMap=array())
<
(array) the file list (see |CConsoleCommand::copyFiles|)

 Builds the file list of a directory. This method traverses through the
 specified directory and builds a list of files and subdirectories that the
 directory contains. The result of this function can be passed to
 |CConsoleCommand::copyFiles|.
    [sourceDir] (string) the source directory
    [targetDir] (string) the target directory
    [baseDir] (string) base directory
    [ignoreFiles] (array) list of the names of files that should be ignored in
    list building process. Argument available since 1.1.11.
    [renameMap] (array) hash array of file names that should be renamed.
    Example value: array('1.old.txt'=>'2.new.txt'). Argument available since
    1.1.11.


*CConsoleCommand::canGetProperty*				 public
 See |CComponent::canGetProperty|


*CConsoleCommand::canSetProperty*				 public
 See |CComponent::canSetProperty|


*CConsoleCommand::confirm*					 public
>
 confirm($message, $default=false)
<
(boolean) whether user confirmed

 Asks user to confirm by typing y or n.
    [message] (string) to echo out before waiting for user input
    [default] (boolean) this value is returned if no selection is made. This
    parameter has been available since version 1.1.11.


*CConsoleCommand::copyFiles*					 public
>
 copyFiles($fileList)
<
(void)

 Copies a list of files from one place to another.
    [fileList] (array) the list of files to be copied (name=>spec). The array
    keys are names displayed during the copy process, and array values are
    specifications for files to be copied. Each array value must be an array
    of the following structure:
      {source} required, the full path of the file/directory to be
      copied from
      {target} required, the full path of the file/directory to be
      copied to
      {callback} optional, the callback to be invoked when copying a
      file. The callback function   should be declared as
      follows:
>
      function foo($source,$params)
<
    where $source parameter is the source file path,
      and the content returned   by the function will be saved into the
      target file.
      {params} optional, the parameters to be passed to the callback


*CConsoleCommand::detachBehavior*				 public
 See |CComponent::detachBehavior|


*CConsoleCommand::detachBehaviors*				 public
 See |CComponent::detachBehaviors|


*CConsoleCommand::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CConsoleCommand::disableBehavior*				 public
 See |CComponent::disableBehavior|


*CConsoleCommand::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CConsoleCommand::enableBehavior*				 public
 See |CComponent::enableBehavior|


*CConsoleCommand::enableBehaviors*				 public
 See |CComponent::enableBehaviors|


*CConsoleCommand::ensureDirectory*				 public
>
 ensureDirectory($directory)
<
(void)

 Creates all parent directories if they do not exist.
    [directory] (string) the directory to be checked


*CConsoleCommand::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CConsoleCommand::getCommandRunner*				 public
>
 getCommandRunner()
<
(CConsoleCommandRunner) the command runner instance



*CConsoleCommand::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CConsoleCommand::getHelp*					 public
>
 getHelp()
<
(string) the command description. Defaults to 'Usage: php entry-script.php
command-name'.

 Provides the command description. This method may be overridden to return the
 actual command description.


*CConsoleCommand::getName*					 public
>
 getName()
<
(string) the command name.



*CConsoleCommand::getOptionHelp*				 public
>
 getOptionHelp()
<
(array) the command option help information. Each array element describes the
help information for a single action.

 Provides the command option help information. The default implementation will
 return all available actions together with their corresponding option
 information.


*CConsoleCommand::hasEvent*					 public
 See |CComponent::hasEvent|


*CConsoleCommand::hasEventHandler*				 public
 See |CComponent::hasEventHandler|


*CConsoleCommand::hasProperty*					 public
 See |CComponent::hasProperty|


*CConsoleCommand::init* 					 public
>
 init()
<
(void)

 Initializes the command object. This method is invoked after a command object
 is created and initialized with configurations. You may override this method
 to further customize the command before it executes.


*CConsoleCommand::onAfterAction*				 public
>
 onAfterAction($event)
<
(void)

 This event is raised after an action finishes execution.
    [event] (CConsoleCommandEvent) the event parameter


*CConsoleCommand::onBeforeAction*				 public
>
 onBeforeAction($event)
<
(void)

 This event is raised before an action is to be executed.
    [event] (CConsoleCommandEvent) the event parameter


*CConsoleCommand::pluralize*					 public
>
 pluralize($name)
<
(string) the pluralized word

 Converts a word to its plural form.
    [name] (string) the word to be pluralized


*CConsoleCommand::prompt*					 public
>
 prompt($message, $default='')
<
(mixed) line read as a string, or false if input has been closed

 Reads input via the readline PHP extension if that's available, or fgets() if
 readline is not installed.
    [message] (string) to echo out before waiting for user input
    [default] (string) the default string to be returned when user does not
    write anything. Defaults to null, means that default string is disabled.
    This parameter is available since version 1.1.11.


*CConsoleCommand::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CConsoleCommand::renderFile*					 public
>
 renderFile($_viewFile_, $_data_=NULL, $_return_=false)
<
(mixed) the rendering result if required. Null otherwise.

 Renders a view file.
    [_viewFile_] (string) view file path
    [_data_] (array) optional data to be extracted as local view variables
    [_return_] (boolean) whether to return the rendering result instead of
    displaying it


*CConsoleCommand::resolveRequest*				 protected
>
 resolveRequest($args)
<
(array) the action name, named options (name=>value), and unnamed options

 Parses the command line arguments and determines which action to perform.
    [args] (array) command line arguments


*CConsoleCommand::run*						 public
>
 run($args)
<
(integer) application exit code, which is returned by the invoked action. 0 if
the action did not return anything. (return value is available since version
1.1.11)

 Executes the command. The default implementation will parse the input
 parameters and dispatch the command request to an appropriate action with the
 corresponding option values
    [args] (array) command line parameters for this command.


*CConsoleCommand::usageError*					 public
>
 usageError($message)
<
(void)

 Displays a usage error. This method will then terminate the execution of the
 current application.
    [message] (string) the error message



 vim:tw=78:ts=8:ft=help:norl:
