
*CWsdlGenerator*   >> |CComponent|
================

 CWsdlGenerator generates the WSDL for a given service class.

 The WSDL generation is based on the doc comments found in the service class
 file. In particular, it recognizes the '@soap' tag in the comment and
 extracts API method and type definitions.

 In a service class, a remote invokable method must be a public method with a
 doc comment block containing the '@soap' tag. In the doc comment, the type
 and name of every input parameter and the type of the return value should be
 declared using the standard phpdoc format.

 CWsdlGenerator recognizes the following primitive types (case-sensitive) in
 the parameter and return type declarations:
   str/string: maps to xsd:string;
   int/integer: maps to xsd:int;
   float/double: maps to xsd:float;
   bool/boolean: maps to xsd:boolean;
   {date} maps to xsd:date;
   {time} maps to xsd:time;
   {datetime} maps to xsd:dateTime;
   {array} maps to xsd:string;
   {object} maps to xsd:struct;
   {mixed} maps to xsd:anyType.If a type is not a primitive type, it is
 considered as a class type, and CWsdlGenerator will look for its property
 declarations. Only public properties are considered, and they each must be
 associated with a doc comment block containg the '@soap' tag. The doc comment
 block should declare the type of the property.

 CWsdlGenerator recognizes the array type with the following format:
>
 typeName[]: maps to tns:typeNameArray
<
 The following is an example declaring a remote invokable method:
>
 / **
   * A foo method.
   * @param string name of something
   * @param string value of something
   * @return string[] some array
   * @soap
   * /
 public function foo($name,$value) {...}
<
 And the following is an example declaring a class with remote accessible
 properties:
>
 class Foo {
     / **
       * @var string name of foo {nillable=1, minOccurs=0, maxOccurs=2}
       * @soap
       * /
     public $name;
     / **
       * @var Member[] members of foo
       * @soap
       * /
     public $members;
 }
<
 In the above, the 'members' property is an array of 'Member' objects. Since
 'Member' is not a primitive type, CWsdlGenerator will look further to find
 the definition of 'Member'.

 Optionally, extra attributes (nillable, minOccurs, maxOccurs) can be defined
 for each property by enclosing definitions into curly brackets and separated
 by comma like so:

 {[attribute1 = value1][, attribute2 = value2], ...}

 where the attribute can be one of following:
   nillable = [0|1|true|false]
   minOccurs = n; where n>=0
   maxOccurs = n; where [n>=0|unbounded]Additionally, each complex data type
 can have assigned a soap indicator flag declaring special usage for such a
 data type. A soap indicator must be declared in the doc comment block with
 the '@soap-indicator' tag. Following soap indicators are currently supported:
   all - (default) allows any sorting order of child nodes
   sequence - all child nodes in WSDL XML file will be expected in
   predefined order
   choice - supplied can be either of the child elementsThe Group indicators
 can be also injected via custom soap definitions as XML node into WSDL
 structure.

 In the following example, class Foo will create a XML node
 <xsd:Foo><xsd:sequence> ... </xsd:sequence></xsd:Foo> with children
 attributes expected in pre-defined order.
>
 / *
   * @soap-indicator sequence
   * /
 class Foo {
     ...
 }
<
 For more on soap indicators, see See
 'http://www.w3schools.com/schema/schema_complex_indicators.asp'.

 Since the variability of WSDL definitions is virtually unlimited, a special
 doc comment tag '@soap-wsdl' can be used in order to inject any custom XML
 string into generated WSDL file. If such a block of the code is found in
 class's comment block, then it will be used instead of parsing and generating
 standard attributes within the class. This gives virtually unlimited
 flexibility in defining data structures of any complexity. Following is an
 example of defining custom piece of WSDL XML node:
>
 / *
   * @soap-wsdl <xsd:sequence>
   * @soap-wsdl 	<xsd:element minOccurs="1" maxOccurs="1" nillable="false"
 name="name" type="xsd:string"/>
   * @soap-wsdl 	<xsd:choice minOccurs="1" maxOccurs="1" nillable="false">
   * @soap-wsdl 		<xsd:element minOccurs="1" maxOccurs="1" nillable="false"
 name="age" type="xsd:integer"/>
   * @soap-wsdl 		<xsd:element minOccurs="1" maxOccurs="1" nillable="false"
 name="date_of_birth" type="xsd:date"/>
   * @soap-wsdl 	</xsd:choice>
   * @soap-wsdl </xsd:sequence>
   * /
 class User {
     / **
       * @var string User name {minOccurs=1, maxOccurs=1}
       * @soap
       * /
     public $name;
     / **
       * @var integer User age {nillable=0, minOccurs=1, maxOccurs=1}
       * @example 35
       * @soap
       * /
     public $age;
     / **
       * @var date User's birthday {nillable=0, minOccurs=1, maxOccurs=1}
       * @example 1980-05-27
       * @soap
       * /
     public $date_of_birth;
 }
<
 In the example above, WSDL generator would inject under XML node <xsd:User>
 the code block defined by @soap-wsdl lines.

 By inserting into SOAP URL link the parameter "?makedoc", WSDL generator will
 output human-friendly overview of all complex data types rather than XML WSDL
 file. Each complex type is described in a separate HTML table and recognizes
 also the '@example' PHPDoc tag. See |CWsdlGenerator::buildHtmlDocs|.


PROPERTY DETAILS
------------------------------------------------------------------------------

<messages>				*CWsdlGenerator::messages*
 (array) Map of request and response types for all operations.

<namespace>				*CWsdlGenerator::namespace*
 (string) the namespace to be used in the generated WSDL. If not set, it
 defaults to the name of the class that WSDL is generated upon.

<operations>				*CWsdlGenerator::operations*
 (array) List of recognized SOAP operations that will become remotely
 available. All methods with declared @soap parameter will be included here in
 the format operation1 => description1, operation2 => description2, ..

<serviceName>				*CWsdlGenerator::serviceName*
 (string) the name of the generated WSDL. If not set, it defaults to
 "urn:{$className}wsdl".

<typeMap>				*CWsdlGenerator::typeMap*
 ()

<types> 				*CWsdlGenerator::types*
 (array) List of complex types used by operations. If an SOAP operation
 defines complex input or output type, all objects are included here
 containing all sub-parameters. For instance, if an SOAP operation
 "createUser" requires complex input object "User", then the object "User"
 will be included here with declared subparameters such as "firstname",
 "lastname", etc..



METHOD DETAILS
------------------------------------------------------------------------------

*CWsdlGenerator::__call*					 public
 See |CComponent::__call|


*CWsdlGenerator::__get* 					 public
 See |CComponent::__get|


*CWsdlGenerator::__isset*					 public
 See |CComponent::__isset|


*CWsdlGenerator::__set* 					 public
 See |CComponent::__set|


*CWsdlGenerator::__unset*					 public
 See |CComponent::__unset|


*CWsdlGenerator::addBindings*					 protected
>
 addBindings($dom)
<
(void)

    [dom] (DOMDocument) Represents an entire HTML or XML document; serves as
    the root of the document tree


*CWsdlGenerator::addMessages*					 protected
>
 addMessages($dom)
<
(void)

    [dom] (DOMDocument) Represents an entire HTML or XML document; serves as
    the root of the document tree


*CWsdlGenerator::addPortTypes*					 protected
>
 addPortTypes($dom)
<
(void)

    [dom] (DOMDocument) Represents an entire HTML or XML document; serves as
    the root of the document tree


*CWsdlGenerator::addService*					 protected
>
 addService($dom, $serviceUrl)
<
(void)

    [dom] (DOMDocument) Represents an entire HTML or XML document; serves as
    the root of the document tree
    [serviceUrl] (string) Web service URL


*CWsdlGenerator::addTypes*					 protected
>
 addTypes($dom)
<
(void)

    [dom] (DOMDocument) Represents an entire HTML or XML document; serves as
    the root of the document tree


*CWsdlGenerator::asa*						 public
 See |CComponent::asa|


*CWsdlGenerator::attachBehavior*				 public
 See |CComponent::attachBehavior|


*CWsdlGenerator::attachBehaviors*				 public
 See |CComponent::attachBehaviors|


*CWsdlGenerator::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CWsdlGenerator::buildDOM*					 protected
>
 buildDOM($serviceUrl, $encoding)
<
(void)

    [serviceUrl] (string) Web service URL
    [encoding] (string) encoding of the WSDL. Defaults to 'UTF-8'.


*CWsdlGenerator::buildHtmlDocs* 				 public
>
 buildHtmlDocs($return=false)
<
(void)

 Generate human friendly HTML documentation for complex data types. This
 method can be invoked either by inserting URL parameter "&makedoc" into URL
 link, e.g. "http://www.mydomain.com/soap/create?makedoc", or simply by
 calling from another script with argument $return=true.

 Each complex data type is described in a separate HTML table containing
 following columns: <ul> <li># - attribute ID</li> <li>Attribute - attribute
 name, e.g. firstname</li> <li>Type - attribute type, e.g. integer, date,
 tns:SoapPovCalculationResultArray</li> <li>Nill - true|false - whether the
 attribute is nillable</li> <li>Min - minimum number of occurrences</li>
 <li>Max - maximum number of occurrences</li> <li>Description - Detailed
 description of the attribute.</li> <li>Example - Attribute example value if
 provided via PHPDoc property @example.</li> <ul>
    [return] (bool) If true, generated HTML output will be returned rather
    than directly sent to output buffer


*CWsdlGenerator::canGetProperty*				 public
 See |CComponent::canGetProperty|


*CWsdlGenerator::canSetProperty*				 public
 See |CComponent::canSetProperty|


*CWsdlGenerator::createOperationElement*			 protected
>
 createOperationElement($dom, $name)
<
(void)

    [dom] (DOMDocument) Represents an entire HTML or XML document; serves as
    the root of the document tree
    [name] (string) method name


*CWsdlGenerator::createPortElement*				 protected
>
 createPortElement($dom, $name, $doc)
<
(void)

    [dom] (DOMDocument) Represents an entire HTML or XML document; serves as
    the root of the document tree
    [name] (string) method name
    [doc] (string) doc


*CWsdlGenerator::detachBehavior*				 public
 See |CComponent::detachBehavior|


*CWsdlGenerator::detachBehaviors*				 public
 See |CComponent::detachBehaviors|


*CWsdlGenerator::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CWsdlGenerator::disableBehavior*				 public
 See |CComponent::disableBehavior|


*CWsdlGenerator::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CWsdlGenerator::enableBehavior*				 public
 See |CComponent::enableBehavior|


*CWsdlGenerator::enableBehaviors*				 public
 See |CComponent::enableBehaviors|


*CWsdlGenerator::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CWsdlGenerator::generateWsdl*					 public
>
 generateWsdl($className, $serviceUrl, $encoding='UTF-8')
<
(string) the generated WSDL

 Generates the WSDL for the given class.
    [className] (string) class name
    [serviceUrl] (string) Web service URL
    [encoding] (string) encoding of the WSDL. Defaults to 'UTF-8'.


*CWsdlGenerator::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CWsdlGenerator::getWsdlElementAttributes*			 protected
>
 getWsdlElementAttributes($comment)
<
(void)

 Parse attributes nillable, minOccurs, maxOccurs
    [comment] (string) Extracted PHPDoc comment


*CWsdlGenerator::hasEvent*					 public
 See |CComponent::hasEvent|


*CWsdlGenerator::hasEventHandler*				 public
 See |CComponent::hasEventHandler|


*CWsdlGenerator::hasProperty*					 public
 See |CComponent::hasProperty|


*CWsdlGenerator::injectDom*					 protected
>
 injectDom($dom, $target, $source)
<
(void)

 Import custom XML source node into WSDL document under specified target node
    [dom] (DOMDocument) XML WSDL document being generated
    [target] (DOMElement) XML node, to which will be appended $source node
    [source] (DOMNode) Source XML node to be imported


*CWsdlGenerator::processMethod* 				 protected
>
 processMethod($method)
<
(void)

    [method] (ReflectionMethod) method


*CWsdlGenerator::processType*					 protected
>
 processType($type)
<
(void)

    [type] (string) PHP variable type


*CWsdlGenerator::raiseEvent*					 public
 See |CComponent::raiseEvent|



 vim:tw=78:ts=8:ft=help:norl:
