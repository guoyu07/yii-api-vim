
*CListView*   >> |CBaseListView| >> |CWidget| >> |CBaseController| >> |CComponent|
===========

 CListView displays a list of data items in terms of a list.

 Unlike |CGridView| which displays the data items in a table, CListView allows
 one to use a view template to render each data item. As a result, CListView
 could generate more flexible rendering result.

 CListView supports both sorting and pagination of the data items. The sorting
 and pagination can be done in AJAX mode or normal page request. A benefit of
 using CListView is that when the user browser disables JavaScript, the
 sorting and pagination automatically degenerate to normal page requests and
 are still functioning as expected.

 CListView should be used together with a |IDataProvider|, preferrably a
 |CActiveDataProvider|.

 The minimal code needed to use CListView is as follows:
>
 $dataProvider=new CActiveDataProvider('Post');

 $this->widget('zii.widgets.CListView', array(
     'dataProvider'=>$dataProvider,
     'itemView'=>'_post',   // refers to the partial view named '_post'
     'sortableAttributes'=>array(
         'title',
         'create_time'=>'Post Time',
     ),
 ));
<
 The above code first creates a data provider for the 'Post' ActiveRecord
 class. It then uses CListView to display every data item as returned by the
 data provider. The display is done via the partial view named '_post'. This
 partial view will be rendered once for every data item. In the view, one can
 access the current data item via variable '$data'. For more details, see
 |CListView::itemView|.

 In order to support sorting, one has to specify the
 |CListView::sortableAttributes| property. By doing so, a list of hyperlinks
 that can sort the data will be displayed.


PROPERTY DETAILS
------------------------------------------------------------------------------

<actionPrefix>				*CListView::actionPrefix*
 See |CWidget::actionPrefix|

<afterAjaxUpdate>			*CListView::afterAjaxUpdate*
 (string) a javascript function that will be invoked after a successful AJAX
 response is received. The function signature is 'function(id, data)' where
 'id' refers to the ID of the list view 'data' the received ajax response
 data.

<ajaxUpdate>				*CListView::ajaxUpdate*
 (mixed) the ID of the container whose content may be updated with an AJAX
 response. Defaults to null, meaning the container for this list view
 instance. If it is set false, it means sorting and pagination will be
 performed in normal page requests instead of AJAX requests. If the sorting
 and pagination should trigger the update of multiple containers' content in
 AJAX fashion, these container IDs may be listed here (separated with comma).

<ajaxUrl>				*CListView::ajaxUrl*
 (mixed) the URL for the AJAX requests should be sent to.
 |CHtml::normalizeUrl| will be called on this property. If not set, the
 current page URL will be used for AJAX requests.

<ajaxVar>				*CListView::ajaxVar*
 (string) the name of the GET variable that indicates the request is an AJAX
 request triggered by this widget. Defaults to 'ajax'. This is effective only
 when |CListView::ajaxUpdate| is not false.

<baseScriptUrl> 			*CListView::baseScriptUrl*
 (string) the base script URL for all list view resources (e.g. javascript,
 CSS file, images). Defaults to null, meaning using the integrated list view
 resources (which are published as assets).

<beforeAjaxUpdate>			*CListView::beforeAjaxUpdate*
 (string) a javascript function that will be invoked before an AJAX update
 occurs. The function signature is 'function(id)' where 'id' refers to the ID
 of the list view.

<controller>				*CListView::controller*
 See |CWidget::controller|

<cssFile>				*CListView::cssFile*
 (string) the URL of the CSS file used by this list view. Defaults to null,
 meaning using the integrated CSS file. If this is set false, you are
 responsible to explicitly include the necessary CSS file in your page.

<dataProvider>				*CListView::dataProvider*
 See |CBaseListView::dataProvider|

<emptyText>				*CListView::emptyText*
 See |CBaseListView::emptyText|

<enableHistory> 			*CListView::enableHistory*
 (boolean) whether to leverage the DOM history object.  Set this property to
 true to persist state of list across page revisits.  Note, there are two
 limitations for this feature: - this feature is only compatible with browsers
 that support HTML5. - expect unexpected functionality (e.g. multiple ajax
 calls) if there is more than one grid/list on a single page with
 enableHistory turned on.

<enablePagination>			*CListView::enablePagination*
 See |CBaseListView::enablePagination|

<enableSorting> 			*CListView::enableSorting*
 See |CBaseListView::enableSorting|

<htmlOptions>				*CListView::htmlOptions*
 See |CBaseListView::htmlOptions|

<id>					*CListView::id*
 See |CWidget::id|

<itemView>				*CListView::itemView*
 (string) the view used for rendering each data item. This property value will
 be passed as the first parameter to either |CController::renderPartial| or
 |CWidget::render| to render each data item. In the corresponding view
 template, the following variables can be used in addition to those declared
 in |CListView::viewData|:
   '$this': refers to the owner of this list view widget. For
   example, if the widget is in the view of a controller, then
   '$this' refers to the controller.
   '$data': refers to the data item currently being rendered.
   '$index': refers to the zero-based index of the data item
   currently being rendered.
   '$widget': refers to this list view widget instance.

<itemsCssClass> 			*CListView::itemsCssClass*
 See |CBaseListView::itemsCssClass|

<itemsTagName>				*CListView::itemsTagName*
 (string) the HTML tag name for the container of all data item display.
 Defaults to 'div'.

<loadingCssClass>			*CListView::loadingCssClass*
 (string) the CSS class name that will be assigned to the widget container
 element when the widget is updating its content via AJAX. Defaults to
 'list-view-loading'.

<owner> 				*CListView::owner*
 See |CWidget::owner|

<pager> 				*CListView::pager*
 See |CBaseListView::pager|

<pagerCssClass> 			*CListView::pagerCssClass*
 See |CBaseListView::pagerCssClass|

<separator>				*CListView::separator*
 (string) the HTML code to be displayed between any two consecutive items.

<skin>					*CListView::skin*
 See |CWidget::skin|

<sortableAttributes>			*CListView::sortableAttributes*
 (array) list of sortable attribute names. In order for an attribute to be
 sortable, it must also appear as a sortable attribute in the
 |IDataProvider::sort| property of |CListView::dataProvider|.

<sorterCssClass>			*CListView::sorterCssClass*
 (string) the CSS class name for the sorter container. Defaults to 'sorter'.

<sorterFooter>				*CListView::sorterFooter*
 (string) the text shown after sort links. Defaults to empty.

<sorterHeader>				*CListView::sorterHeader*
 (string) the text shown before sort links. Defaults to 'Sort by: '.

<summaryCssClass>			*CListView::summaryCssClass*
 See |CBaseListView::summaryCssClass|

<summaryText>				*CListView::summaryText*
 See |CBaseListView::summaryText|

<tagName>				*CListView::tagName*
 See |CBaseListView::tagName|

<template>				*CListView::template*
 (string) the template to be used to control the layout of various components
 in the list view. These tokens are recognized: {summary}, {sorter}, {items}
 and {pager}. They will be replaced with the summary text, the sort links, the
 data item list, and the pager.

<updateSelector>			*CListView::updateSelector*
 (string) the jQuery selector of the HTML elements that may trigger AJAX
 updates when they are clicked. If not set, the pagination links and the
 sorting links will trigger AJAX updates.

<viewData>				*CListView::viewData*
 (array) additional data to be passed to |CListView::itemView| when rendering
 each data item. This array will be extracted into local PHP variables that
 can be accessed in the |CListView::itemView|.

<viewPath>				*CListView::viewPath*
 See |CWidget::viewPath|



METHOD DETAILS
------------------------------------------------------------------------------

*CListView::__call*						 public
 See |CComponent::__call|


*CListView::__construct*					 public
 See |CWidget::__construct|


*CListView::__get*						 public
 See |CComponent::__get|


*CListView::__isset*						 public
 See |CComponent::__isset|


*CListView::__set*						 public
 See |CComponent::__set|


*CListView::__unset*						 public
 See |CComponent::__unset|


*CListView::actions*						 public
 See |CWidget::actions|


*CListView::asa*						 public
 See |CComponent::asa|


*CListView::attachBehavior*					 public
 See |CComponent::attachBehavior|


*CListView::attachBehaviors*					 public
 See |CComponent::attachBehaviors|


*CListView::attachEventHandler* 				 public
 See |CComponent::attachEventHandler|


*CListView::beginCache* 					 public
 See |CBaseController::beginCache|


*CListView::beginClip*						 public
 See |CBaseController::beginClip|


*CListView::beginContent*					 public
 See |CBaseController::beginContent|


*CListView::beginWidget*					 public
 See |CBaseController::beginWidget|


*CListView::canGetProperty*					 public
 See |CComponent::canGetProperty|


*CListView::canSetProperty*					 public
 See |CComponent::canSetProperty|


*CListView::createWidget*					 public
 See |CBaseController::createWidget|


*CListView::detachBehavior*					 public
 See |CComponent::detachBehavior|


*CListView::detachBehaviors*					 public
 See |CComponent::detachBehaviors|


*CListView::detachEventHandler* 				 public
 See |CComponent::detachEventHandler|


*CListView::disableBehavior*					 public
 See |CComponent::disableBehavior|


*CListView::disableBehaviors*					 public
 See |CComponent::disableBehaviors|


*CListView::enableBehavior*					 public
 See |CComponent::enableBehavior|


*CListView::enableBehaviors*					 public
 See |CComponent::enableBehaviors|


*CListView::endCache*						 public
 See |CBaseController::endCache|


*CListView::endClip*						 public
 See |CBaseController::endClip|


*CListView::endContent* 					 public
 See |CBaseController::endContent|


*CListView::endWidget*						 public
 See |CBaseController::endWidget|


*CListView::evaluateExpression* 				 public
 See |CComponent::evaluateExpression|


*CListView::getController*					 public
 See |CWidget::getController|


*CListView::getEventHandlers*					 public
 See |CComponent::getEventHandlers|


*CListView::getId*						 public
 See |CWidget::getId|


*CListView::getOwner*						 public
 See |CWidget::getOwner|


*CListView::getViewFile*					 public
 See |CWidget::getViewFile|


*CListView::getViewPath*					 public
 See |CWidget::getViewPath|


*CListView::hasEvent*						 public
 See |CComponent::hasEvent|


*CListView::hasEventHandler*					 public
 See |CComponent::hasEventHandler|


*CListView::hasProperty*					 public
 See |CComponent::hasProperty|


*CListView::init*						 public
>
 init()
<
(void)

 Initializes the list view. This method will initialize required property
 values and instantiate columns objects.


*CListView::raiseEvent* 					 public
 See |CComponent::raiseEvent|


*CListView::registerClientScript*				 public
>
 registerClientScript()
<
(void)

 Registers necessary client scripts.


*CListView::render*						 public
 See |CWidget::render|


*CListView::renderContent*					 public
 See |CBaseListView::renderContent|


*CListView::renderEmptyText*					 public
 See |CBaseListView::renderEmptyText|


*CListView::renderFile* 					 public
 See |CBaseController::renderFile|


*CListView::renderInternal*					 public
 See |CBaseController::renderInternal|


*CListView::renderItems*					 public
>
 renderItems()
<
(void)

 Renders the data item list.


*CListView::renderKeys* 					 public
 See |CBaseListView::renderKeys|


*CListView::renderPager*					 public
 See |CBaseListView::renderPager|


*CListView::renderSection*					 protected
 See |CBaseListView::renderSection|


*CListView::renderSorter*					 public
>
 renderSorter()
<
(void)

 Renders the sorter.


*CListView::renderSummary*					 public
 See |CBaseListView::renderSummary|


*CListView::run*						 public
 See |CBaseListView::run|


*CListView::setId*						 public
 See |CWidget::setId|


*CListView::widget*						 public
 See |CBaseController::widget|



 vim:tw=78:ts=8:ft=help:norl:
