
*CRedisCache*   >> |CCache| >> |CApplicationComponent| >> |CComponent|
=============

 CRedisCache implements a cache application component based on 'redis'.

 CRedisCache needs to be configured with |CRedisCache::hostname|,
 |CRedisCache::port| and |CRedisCache::database| of the server to connect to.
 By default CRedisCache assumes there is a redis server running on localhost
 at port 6379 and uses the database number 0.

 CRedisCache also supports 'the AUTH command' of redis. When the server needs
 authentication, you can set the |CRedisCache::password| property to
 authenticate with the server after connect.

 See |CCache| manual for common cache operations that are supported by
 CRedisCache.

 To use CRedisCache as the cache application component, configure the
 application as follows,
>
 array(
     'components'=>array(
         'cache'=>array(
             'class'=>'CRedisCache',
             'hostname'=>'localhost',
             'port'=>6379,
             'database'=>0,
         ),
     ),
 )
<
 The minimum required redis version is 2.0.0.


PROPERTY DETAILS
------------------------------------------------------------------------------

<behaviors>				*CRedisCache::behaviors*
 See |CApplicationComponent::behaviors|

<database>				*CRedisCache::database*
 (int) the redis database to use. This is an integer value starting from 0.
 Defaults to 0.

<hashKey>				*CRedisCache::hashKey*
 See |CCache::hashKey|

<hostname>				*CRedisCache::hostname*
 (string) hostname to use for connecting to the redis server. Defaults to
 'localhost'.

<isInitialized> 			*CRedisCache::isInitialized*
 See |CApplicationComponent::isInitialized|

<keyPrefix>				*CRedisCache::keyPrefix*
 See |CCache::keyPrefix|

<password>				*CRedisCache::password*
 (string) the password to use to authenticate with the redis server. If not
 set, no AUTH command will be sent.

<port>					*CRedisCache::port*
 (int) the port to use for connecting to the redis server. Default port is
 6379.

<serializer>				*CRedisCache::serializer*
 See |CCache::serializer|

<timeout>				*CRedisCache::timeout*
 (float) timeout to use for connection to redis. If not set the timeout set in
 php.ini will be used: ini_get("default_socket_timeout")



METHOD DETAILS
------------------------------------------------------------------------------

*CRedisCache::__call*						 public
 See |CComponent::__call|


*CRedisCache::__get*						 public
 See |CComponent::__get|


*CRedisCache::__isset*						 public
 See |CComponent::__isset|


*CRedisCache::__set*						 public
 See |CComponent::__set|


*CRedisCache::__unset*						 public
 See |CComponent::__unset|


*CRedisCache::add*						 public
 See |CCache::add|


*CRedisCache::addValue* 					 protected
>
 addValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key. This is the implementation of the method declared in the parent
 class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.


*CRedisCache::asa*						 public
 See |CComponent::asa|


*CRedisCache::attachBehavior*					 public
 See |CComponent::attachBehavior|


*CRedisCache::attachBehaviors*					 public
 See |CComponent::attachBehaviors|


*CRedisCache::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CRedisCache::canGetProperty*					 public
 See |CComponent::canGetProperty|


*CRedisCache::canSetProperty*					 public
 See |CComponent::canSetProperty|


*CRedisCache::connect*						 protected
>
 connect()
<
(void)

 Establishes a connection to the redis server. It does nothing if the
 connection has already been established.


*CRedisCache::delete*						 public
 See |CCache::delete|


*CRedisCache::deleteValue*					 protected
>
 deleteValue($key)
<
(boolean) if no error happens during deletion

 Deletes a value with the specified key from cache This is the implementation
 of the method declared in the parent class.
    [key] (string) the key of the value to be deleted


*CRedisCache::detachBehavior*					 public
 See |CComponent::detachBehavior|


*CRedisCache::detachBehaviors*					 public
 See |CComponent::detachBehaviors|


*CRedisCache::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CRedisCache::disableBehavior*					 public
 See |CComponent::disableBehavior|


*CRedisCache::disableBehaviors* 				 public
 See |CComponent::disableBehaviors|


*CRedisCache::enableBehavior*					 public
 See |CComponent::enableBehavior|


*CRedisCache::enableBehaviors*					 public
 See |CComponent::enableBehaviors|


*CRedisCache::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CRedisCache::executeCommand*					 public
>
 executeCommand($name, $params=array())
<
(array|bool|null|string) Dependend on the executed command this method will
return different data types:
  'true' for commands that return "status reply".
  'string' for commands that return "integer reply"       as the
  value is in the range of a signed 64 bit integer.
  'string' or 'null' for commands that return "bulk reply".
  'array' for commands that return "Multi-bulk replies".See 'redis protocol
description' for details on the mentioned reply types.

 Executes a redis command. For a list of available commands and their
 parameters see 'http://redis.io/commands'.
    [name] (string) the name of the command
    [params] (array) list of parameters for the command


*CRedisCache::flush*						 public
 See |CCache::flush|


*CRedisCache::flushValues*					 protected
>
 flushValues()
<
(boolean) whether the flush operation was successful.

 Deletes all values from cache. This is the implementation of the method
 declared in the parent class.


*CRedisCache::generateUniqueKey*				 protected
 See |CCache::generateUniqueKey|


*CRedisCache::get*						 public
 See |CCache::get|


*CRedisCache::getEventHandlers* 				 public
 See |CComponent::getEventHandlers|


*CRedisCache::getIsInitialized* 				 public
 See |CApplicationComponent::getIsInitialized|


*CRedisCache::getValue* 					 protected
>
 getValue($key)
<
(string|boolean) the value stored in cache, false if the value is not in the
cache or expired.

 Retrieves a value from cache with a specified key. This is the implementation
 of the method declared in the parent class.
    [key] (string) a unique key identifying the cached value


*CRedisCache::getValues*					 protected
>
 getValues($keys)
<
(array) a list of cached values indexed by the keys

 Retrieves multiple values from cache with the specified keys.
    [keys] (array) a list of keys identifying the cached values


*CRedisCache::hasEvent* 					 public
 See |CComponent::hasEvent|


*CRedisCache::hasEventHandler*					 public
 See |CComponent::hasEventHandler|


*CRedisCache::hasProperty*					 public
 See |CComponent::hasProperty|


*CRedisCache::init*						 public
 See |CCache::init|


*CRedisCache::mget*						 public
 See |CCache::mget|


*CRedisCache::offsetExists*					 public
 See |CCache::offsetExists|


*CRedisCache::offsetGet*					 public
 See |CCache::offsetGet|


*CRedisCache::offsetSet*					 public
 See |CCache::offsetSet|


*CRedisCache::offsetUnset*					 public
 See |CCache::offsetUnset|


*CRedisCache::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CRedisCache::set*						 public
 See |CCache::set|


*CRedisCache::setValue* 					 protected
>
 setValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key in cache. This is the implementation of
 the method declared in the parent class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.



 vim:tw=78:ts=8:ft=help:norl:
