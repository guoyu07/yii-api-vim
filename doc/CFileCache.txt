
*CFileCache*   >> |CCache| >> |CApplicationComponent| >> |CComponent|
============

 CFileCache provides a file-based caching mechanism.

 For each data value being cached, CFileCache will use store it in a separate
 file under |CFileCache::cachePath| which defaults to
 'protected/runtime/cache'. CFileCache will perform garbage collection
 automatically to remove expired cache files.

 See |CCache| manual for common cache operations that are supported by
 CFileCache.


PROPERTY DETAILS
------------------------------------------------------------------------------

<behaviors>				*CFileCache::behaviors*
 See |CApplicationComponent::behaviors|

<cacheFileSuffix>			*CFileCache::cacheFileSuffix*
 (string) cache file suffix. Defaults to '.bin'.

<cachePath>				*CFileCache::cachePath*
 (string) the directory to store cache files. Defaults to null, meaning using
 'protected/runtime/cache' as the directory.

<directoryLevel>			*CFileCache::directoryLevel*
 (integer) the level of sub-directories to store cache files. Defaults to 0,
 meaning no sub-directories. If the system has huge number of cache files
 (e.g. 10K+), you may want to set this value to be 1 or 2 so that the file
 system is not over burdened. The value of this property should not exceed 16
 (less than 3 is recommended).

<gCProbability> 			*CFileCache::gCProbability*
 (integer) the probability (parts per million) that garbage collection (GC)
 should be performed when storing a piece of data in the cache. Defaults to
 100, meaning 0.01% chance.

<hashKey>				*CFileCache::hashKey*
 See |CCache::hashKey|

<isInitialized> 			*CFileCache::isInitialized*
 See |CApplicationComponent::isInitialized|

<keyPrefix>				*CFileCache::keyPrefix*
 See |CCache::keyPrefix|

<serializer>				*CFileCache::serializer*
 See |CCache::serializer|



METHOD DETAILS
------------------------------------------------------------------------------

*CFileCache::__call*						 public
 See |CComponent::__call|


*CFileCache::__get*						 public
 See |CComponent::__get|


*CFileCache::__isset*						 public
 See |CComponent::__isset|


*CFileCache::__set*						 public
 See |CComponent::__set|


*CFileCache::__unset*						 public
 See |CComponent::__unset|


*CFileCache::add*						 public
 See |CCache::add|


*CFileCache::addValue*						 protected
>
 addValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key. This is the implementation of the method declared in the parent
 class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.


*CFileCache::asa*						 public
 See |CComponent::asa|


*CFileCache::attachBehavior*					 public
 See |CComponent::attachBehavior|


*CFileCache::attachBehaviors*					 public
 See |CComponent::attachBehaviors|


*CFileCache::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CFileCache::canGetProperty*					 public
 See |CComponent::canGetProperty|


*CFileCache::canSetProperty*					 public
 See |CComponent::canSetProperty|


*CFileCache::delete*						 public
 See |CCache::delete|


*CFileCache::deleteValue*					 protected
>
 deleteValue($key)
<
(boolean) if no error happens during deletion

 Deletes a value with the specified key from cache This is the implementation
 of the method declared in the parent class.
    [key] (string) the key of the value to be deleted


*CFileCache::detachBehavior*					 public
 See |CComponent::detachBehavior|


*CFileCache::detachBehaviors*					 public
 See |CComponent::detachBehaviors|


*CFileCache::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CFileCache::disableBehavior*					 public
 See |CComponent::disableBehavior|


*CFileCache::disableBehaviors*					 public
 See |CComponent::disableBehaviors|


*CFileCache::enableBehavior*					 public
 See |CComponent::enableBehavior|


*CFileCache::enableBehaviors*					 public
 See |CComponent::enableBehaviors|


*CFileCache::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CFileCache::flush*						 public
 See |CCache::flush|


*CFileCache::flushValues*					 protected
>
 flushValues()
<
(boolean) whether the flush operation was successful.

 Deletes all values from cache. This is the implementation of the method
 declared in the parent class.


*CFileCache::gc*						 public
>
 gc($expiredOnly=true, $path='')
<
(void)

 Removes expired cache files.
    [expiredOnly] (boolean) whether only expired cache files should be
    removed. If false, all cache files under |CFileCache::cachePath| will be
    removed.
    [path] (string) the path to clean with. If null, it will be
    |CFileCache::cachePath|.


*CFileCache::generateUniqueKey* 				 protected
 See |CCache::generateUniqueKey|


*CFileCache::get*						 public
 See |CCache::get|


*CFileCache::getCacheFile*					 protected
>
 getCacheFile($key)
<
(string) the cache file path

 Returns the cache file path given the cache key.
    [key] (string) cache key


*CFileCache::getEventHandlers*					 public
 See |CComponent::getEventHandlers|


*CFileCache::getGCProbability*					 public
>
 getGCProbability()
<
(integer) the probability (parts per million) that garbage collection (GC)
should be performed when storing a piece of data in the cache. Defaults to
100, meaning 0.01% chance.



*CFileCache::getIsInitialized*					 public
 See |CApplicationComponent::getIsInitialized|


*CFileCache::getValue*						 protected
>
 getValue($key)
<
(string) the value stored in cache, false if the value is not in the cache or
expired.

 Retrieves a value from cache with a specified key. This is the implementation
 of the method declared in the parent class.
    [key] (string) a unique key identifying the cached value


*CFileCache::getValues* 					 protected
 See |CCache::getValues|


*CFileCache::hasEvent*						 public
 See |CComponent::hasEvent|


*CFileCache::hasEventHandler*					 public
 See |CComponent::hasEventHandler|


*CFileCache::hasProperty*					 public
 See |CComponent::hasProperty|


*CFileCache::init*						 public
>
 init()
<
(void)

 Initializes this application component. This method is required by the
 |IApplicationComponent| interface.


*CFileCache::mget*						 public
 See |CCache::mget|


*CFileCache::offsetExists*					 public
 See |CCache::offsetExists|


*CFileCache::offsetGet* 					 public
 See |CCache::offsetGet|


*CFileCache::offsetSet* 					 public
 See |CCache::offsetSet|


*CFileCache::offsetUnset*					 public
 See |CCache::offsetUnset|


*CFileCache::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CFileCache::set*						 public
 See |CCache::set|


*CFileCache::setGCProbability*					 public
>
 setGCProbability($value)
<
(void)

    [value] (integer) the probability (parts per million) that garbage
    collection (GC) should be performed when storing a piece of data in the
    cache. Defaults to 100, meaning 0.01% chance. This number should be
    between 0 and 1000000. A value 0 meaning no GC will be performed at all.


*CFileCache::setValue*						 protected
>
 setValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key in cache. This is the implementation of
 the method declared in the parent class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.



 vim:tw=78:ts=8:ft=help:norl:
