
*CTypeValidator*   >> |CValidator| >> |CComponent|
================

 CTypeValidator verifies if the attribute is of the type specified by
 |CTypeValidator::type|.

 The following data types are supported:
   <b>integer</b> A 32-bit signed integer data type.
   <b>float</b> A double-precision floating point number data type.
   <b>string</b> A string data type.
   <b>array</b> An array value.
   <b>date</b> A date data type.
   <b>time</b> A time data type.
   <b>datetime</b> A date and time data type.For <b>date</b> type, the
 property |CTypeValidator::dateFormat| will be used to determine how to parse
 the date string. If the given date value doesn't follow the format, the
 attribute is considered as invalid.

 Starting from version 1.1.7, we have a dedicated date validator
 |CDateValidator|. Please consider using this validator to validate a
 date-typed value.

 When using the |CTypeValidator::message| property to define a custom error
 message, the message may contain additional placeholders that will be
 replaced with the actual content. In addition to the "{attribute}"
 placeholder, recognized by all validators (see |CValidator|), CTypeValidator
 allows for the following placeholders to be specified:
   {type}: replaced with data type the attribute should be
   |CTypeValidator::type|.


PROPERTY DETAILS
------------------------------------------------------------------------------

<allowEmpty>				*CTypeValidator::allowEmpty*
 (boolean) whether the attribute value can be null or empty. Defaults to true,
 meaning that if the attribute is empty, it is considered valid.

<attributes>				*CTypeValidator::attributes*
 See |CValidator::attributes|

<builtInValidators>			*CTypeValidator::builtInValidators*
 See |CValidator::builtInValidators|

<dateFormat>				*CTypeValidator::dateFormat*
 (string) the format pattern that the date value should follow. Defaults to
 'MM/dd/yyyy'. Please see |CDateTimeParser| for details about how to specify a
 date format. This property is effective only when |CTypeValidator::type| is
 'date'.

<datetimeFormat>			*CTypeValidator::datetimeFormat*
 (string) the format pattern that the datetime value should follow. Defaults
 to 'MM/dd/yyyy hh:mm'. Please see |CDateTimeParser| for details about how to
 specify a datetime format. This property is effective only when
 |CTypeValidator::type| is 'datetime'.

<enableClientValidation>		*CTypeValidator::enableClientValidation*
 See |CValidator::enableClientValidation|

<except>				*CTypeValidator::except*
 See |CValidator::except|

<message>				*CTypeValidator::message*
 See |CValidator::message|

<on>					*CTypeValidator::on*
 See |CValidator::on|

<safe>					*CTypeValidator::safe*
 See |CValidator::safe|

<skipOnError>				*CTypeValidator::skipOnError*
 See |CValidator::skipOnError|

<timeFormat>				*CTypeValidator::timeFormat*
 (string) the format pattern that the time value should follow. Defaults to
 'hh:mm'. Please see |CDateTimeParser| for details about how to specify a time
 format. This property is effective only when |CTypeValidator::type| is
 'time'.

<type>					*CTypeValidator::type*
 (string) the data type that the attribute should be. Defaults to 'string'.
 Valid values include 'string', 'integer', 'float', 'array', 'date', 'time'
 and 'datetime'.



METHOD DETAILS
------------------------------------------------------------------------------

*CTypeValidator::__call*					 public
 See |CComponent::__call|


*CTypeValidator::__get* 					 public
 See |CComponent::__get|


*CTypeValidator::__isset*					 public
 See |CComponent::__isset|


*CTypeValidator::__set* 					 public
 See |CComponent::__set|


*CTypeValidator::__unset*					 public
 See |CComponent::__unset|


*CTypeValidator::addError*					 protected
 See |CValidator::addError|


*CTypeValidator::applyTo*					 public
 See |CValidator::applyTo|


*CTypeValidator::asa*						 public
 See |CComponent::asa|


*CTypeValidator::attachBehavior*				 public
 See |CComponent::attachBehavior|


*CTypeValidator::attachBehaviors*				 public
 See |CComponent::attachBehaviors|


*CTypeValidator::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CTypeValidator::canGetProperty*				 public
 See |CComponent::canGetProperty|


*CTypeValidator::canSetProperty*				 public
 See |CComponent::canSetProperty|


*CTypeValidator::clientValidateAttribute*			 public
 See |CValidator::clientValidateAttribute|


*CTypeValidator::createValidator*				 public
 See |CValidator::createValidator|


*CTypeValidator::detachBehavior*				 public
 See |CComponent::detachBehavior|


*CTypeValidator::detachBehaviors*				 public
 See |CComponent::detachBehaviors|


*CTypeValidator::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CTypeValidator::disableBehavior*				 public
 See |CComponent::disableBehavior|


*CTypeValidator::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CTypeValidator::enableBehavior*				 public
 See |CComponent::enableBehavior|


*CTypeValidator::enableBehaviors*				 public
 See |CComponent::enableBehaviors|


*CTypeValidator::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CTypeValidator::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CTypeValidator::hasEvent*					 public
 See |CComponent::hasEvent|


*CTypeValidator::hasEventHandler*				 public
 See |CComponent::hasEventHandler|


*CTypeValidator::hasProperty*					 public
 See |CComponent::hasProperty|


*CTypeValidator::isEmpty*					 protected
 See |CValidator::isEmpty|


*CTypeValidator::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CTypeValidator::validate*					 public
 See |CValidator::validate|


*CTypeValidator::validateAttribute*				 protected
>
 validateAttribute($object, $attribute)
<
(void)

 Validates the attribute of the object. If there is any error, the error
 message is added to the object.
    [object] (CModel) the object being validated
    [attribute] (string) the attribute being validated



 vim:tw=78:ts=8:ft=help:norl:
