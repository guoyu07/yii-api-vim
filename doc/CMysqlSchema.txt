
*CMysqlSchema*   >> |CDbSchema| >> |CComponent|
==============

 CMysqlSchema is the class for retrieving metadata information from a MySQL
 database (version 4.1.x and 5.x).


PROPERTY DETAILS
------------------------------------------------------------------------------

<columnTypes>				*CMysqlSchema::columnTypes*
 (array) the abstract column types mapped to physical column types.

<commandBuilder>			*CMysqlSchema::commandBuilder*
 See |CDbSchema::commandBuilder|

<dbConnection>				*CMysqlSchema::dbConnection*
 See |CDbSchema::dbConnection|

<serverVersion> 			*CMysqlSchema::serverVersion*
 (float) server version.

<tableNames>				*CMysqlSchema::tableNames*
 See |CDbSchema::tableNames|

<tables>				*CMysqlSchema::tables*
 See |CDbSchema::tables|



METHOD DETAILS
------------------------------------------------------------------------------

*CMysqlSchema::__call*						 public
 See |CComponent::__call|


*CMysqlSchema::__construct*					 public
 See |CDbSchema::__construct|


*CMysqlSchema::__get*						 public
 See |CComponent::__get|


*CMysqlSchema::__isset* 					 public
 See |CComponent::__isset|


*CMysqlSchema::__set*						 public
 See |CComponent::__set|


*CMysqlSchema::__unset* 					 public
 See |CComponent::__unset|


*CMysqlSchema::addColumn*					 public
 See |CDbSchema::addColumn|


*CMysqlSchema::addForeignKey*					 public
 See |CDbSchema::addForeignKey|


*CMysqlSchema::addPrimaryKey*					 public
 See |CDbSchema::addPrimaryKey|


*CMysqlSchema::alterColumn*					 public
 See |CDbSchema::alterColumn|


*CMysqlSchema::asa*						 public
 See |CComponent::asa|


*CMysqlSchema::attachBehavior*					 public
 See |CComponent::attachBehavior|


*CMysqlSchema::attachBehaviors* 				 public
 See |CComponent::attachBehaviors|


*CMysqlSchema::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CMysqlSchema::canGetProperty*					 public
 See |CComponent::canGetProperty|


*CMysqlSchema::canSetProperty*					 public
 See |CComponent::canSetProperty|


*CMysqlSchema::checkIntegrity*					 public
>
 checkIntegrity($check=true, $schema='')
<
(void)

 Enables or disables integrity check.
    [check] (boolean) whether to turn on or off the integrity check.
    [schema] (string) the schema of the tables. Defaults to empty string,
    meaning the current or default schema.


*CMysqlSchema::compareTableNames*				 public
>
 compareTableNames($name1, $name2)
<
(boolean) whether the two table names refer to the same table.

 Compares two table names. The table names can be either quoted or unquoted.
 This method will consider both cases.
    [name1] (string) table name 1
    [name2] (string) table name 2


*CMysqlSchema::createColumn*					 protected
>
 createColumn($column)
<
(CDbColumnSchema) normalized column metadata

 Creates a table column.
    [column] (array) column metadata


*CMysqlSchema::createCommandBuilder*				 protected
>
 createCommandBuilder()
<
(CDbCommandBuilder) command builder instance

 Creates a command builder for the database. This method overrides parent
 implementation in order to create a MySQL specific command builder


*CMysqlSchema::createIndex*					 public
 See |CDbSchema::createIndex|


*CMysqlSchema::createTable*					 public
 See |CDbSchema::createTable|


*CMysqlSchema::detachBehavior*					 public
 See |CComponent::detachBehavior|


*CMysqlSchema::detachBehaviors* 				 public
 See |CComponent::detachBehaviors|


*CMysqlSchema::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CMysqlSchema::disableBehavior* 				 public
 See |CComponent::disableBehavior|


*CMysqlSchema::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CMysqlSchema::dropColumn*					 public
 See |CDbSchema::dropColumn|


*CMysqlSchema::dropForeignKey*					 public
>
 dropForeignKey($name, $table)
<
(string) the SQL statement for dropping a foreign key constraint.

 Builds a SQL statement for dropping a foreign key constraint.
    [name] (string) the name of the foreign key constraint to be dropped. The
    name will be properly quoted by the method.
    [table] (string) the table whose foreign is to be dropped. The name will
    be properly quoted by the method.


*CMysqlSchema::dropIndex*					 public
 See |CDbSchema::dropIndex|


*CMysqlSchema::dropPrimaryKey*					 public
>
 dropPrimaryKey($name, $table)
<
(string) the SQL statement for removing a primary key constraint from an
existing table.

 Builds a SQL statement for removing a primary key constraint to an existing
 table.
    [name] (string) the name of the primary key constraint to be removed.
    [table] (string) the table that the primary key constraint will be removed
    from.


*CMysqlSchema::dropTable*					 public
 See |CDbSchema::dropTable|


*CMysqlSchema::enableBehavior*					 public
 See |CComponent::enableBehavior|


*CMysqlSchema::enableBehaviors* 				 public
 See |CComponent::enableBehaviors|


*CMysqlSchema::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CMysqlSchema::findColumns*					 protected
>
 findColumns($table)
<
(boolean) whether the table exists in the database

 Collects the table column metadata.
    [table] (CMysqlTableSchema) the table metadata


*CMysqlSchema::findConstraints* 				 protected
>
 findConstraints($table)
<
(void)

 Collects the foreign key column details for the given table.
    [table] (CMysqlTableSchema) the table metadata


*CMysqlSchema::findTableNames*					 protected
>
 findTableNames($schema='')
<
(array) all table names in the database.

 Returns all table names in the database.
    [schema] (string) the schema of the tables. Defaults to empty string,
    meaning the current or default schema. If not empty, the returned table
    names will be prefixed with the schema name.


*CMysqlSchema::getColumnType*					 public
 See |CDbSchema::getColumnType|


*CMysqlSchema::getCommandBuilder*				 public
 See |CDbSchema::getCommandBuilder|


*CMysqlSchema::getDbConnection* 				 public
 See |CDbSchema::getDbConnection|


*CMysqlSchema::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CMysqlSchema::getServerVersion*				 protected
>
 getServerVersion()
<
(float) server version.



*CMysqlSchema::getTable*					 public
 See |CDbSchema::getTable|


*CMysqlSchema::getTableNames*					 public
 See |CDbSchema::getTableNames|


*CMysqlSchema::getTables*					 public
 See |CDbSchema::getTables|


*CMysqlSchema::hasEvent*					 public
 See |CComponent::hasEvent|


*CMysqlSchema::hasEventHandler* 				 public
 See |CComponent::hasEventHandler|


*CMysqlSchema::hasProperty*					 public
 See |CComponent::hasProperty|


*CMysqlSchema::loadTable*					 protected
>
 loadTable($name)
<
(CMysqlTableSchema) driver dependent table metadata. Null if the table does
not exist.

 Loads the metadata for the specified table.
    [name] (string) table name


*CMysqlSchema::quoteColumnName* 				 public
 See |CDbSchema::quoteColumnName|


*CMysqlSchema::quoteSimpleColumnName*				 public
>
 quoteSimpleColumnName($name)
<
(string) the properly quoted column name

 Quotes a column name for use in a query. A simple column name does not
 contain prefix.
    [name] (string) column name


*CMysqlSchema::quoteSimpleTableName*				 public
>
 quoteSimpleTableName($name)
<
(string) the properly quoted table name

 Quotes a table name for use in a query. A simple table name does not schema
 prefix.
    [name] (string) table name


*CMysqlSchema::quoteTableName*					 public
 See |CDbSchema::quoteTableName|


*CMysqlSchema::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CMysqlSchema::refresh* 					 public
 See |CDbSchema::refresh|


*CMysqlSchema::renameColumn*					 public
>
 renameColumn($table, $name, $newName)
<
(string) the SQL statement for renaming a DB column.

 Builds a SQL statement for renaming a column.
    [table] (string) the table whose column is to be renamed. The name will be
    properly quoted by the method.
    [name] (string) the old name of the column. The name will be properly
    quoted by the method.
    [newName] (string) the new name of the column. The name will be properly
    quoted by the method.


*CMysqlSchema::renameTable*					 public
 See |CDbSchema::renameTable|


*CMysqlSchema::resetSequence*					 public
>
 resetSequence($table, $value=NULL)
<
(void)

 Resets the sequence value of a table's primary key. The sequence will be
 reset such that the primary key of the next new row inserted will have the
 specified value or 1.
    [table] (CDbTableSchema) the table schema whose primary key sequence will
    be reset
    [value] (mixed) the value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*CMysqlSchema::resolveTableNames*				 protected
>
 resolveTableNames($table, $name)
<
(void)

 Generates various kinds of table names.
    [table] (CMysqlTableSchema) the table instance
    [name] (string) the unquoted table name


*CMysqlSchema::truncateTable*					 public
 See |CDbSchema::truncateTable|



 vim:tw=78:ts=8:ft=help:norl:
