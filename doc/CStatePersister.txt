
*CStatePersister*   >> |CApplicationComponent| >> |CComponent|
=================

 CStatePersister implements a file-based persistent data storage.

 It can be used to keep data available through multiple requests and sessions.

 By default, CStatePersister stores data in a file named 'state.bin' that is
 located under the application |CApplication::getRuntimePath|. You may change
 the location by setting the |CStatePersister::stateFile| property.

 To retrieve the data from CStatePersister, call |CStatePersister::load|. To
 save the data, call |CStatePersister::save|.

 Comparison among state persister, session and cache is as follows:
   {session} data persisting within a single user session.
   state persister: data persisting through all requests/sessions
   (e.g. hit counter).
   {cache} volatile and fast storage. It may be used as storage
   medium for session or state persister.Since server resource is often
 limited, be cautious if you plan to use CStatePersister to store large amount
 of data. You should also consider using database-based persister to improve
 the throughput.

 CStatePersister is a core application component used to store global
 application state. It may be accessed via |CApplication::getStatePersister|.
 page state persistent method based on cache.


PROPERTY DETAILS
------------------------------------------------------------------------------

<behaviors>				*CStatePersister::behaviors*
 See |CApplicationComponent::behaviors|

<cacheID>				*CStatePersister::cacheID*
 (string) the ID of the cache application component that is used to cache the
 state values. Defaults to 'cache' which refers to the primary cache
 application component. Set this property to false if you want to disable
 caching state values.

<isInitialized> 			*CStatePersister::isInitialized*
 See |CApplicationComponent::isInitialized|

<stateFile>				*CStatePersister::stateFile*
 (string) the file path storing the state data. Make sure the directory
 containing the file exists and is writable by the Web server process. If
 using relative path, also make sure the path is correct.



METHOD DETAILS
------------------------------------------------------------------------------

*CStatePersister::__call*					 public
 See |CComponent::__call|


*CStatePersister::__get*					 public
 See |CComponent::__get|


*CStatePersister::__isset*					 public
 See |CComponent::__isset|


*CStatePersister::__set*					 public
 See |CComponent::__set|


*CStatePersister::__unset*					 public
 See |CComponent::__unset|


*CStatePersister::asa*						 public
 See |CComponent::asa|


*CStatePersister::attachBehavior*				 public
 See |CComponent::attachBehavior|


*CStatePersister::attachBehaviors*				 public
 See |CComponent::attachBehaviors|


*CStatePersister::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CStatePersister::canGetProperty*				 public
 See |CComponent::canGetProperty|


*CStatePersister::canSetProperty*				 public
 See |CComponent::canSetProperty|


*CStatePersister::detachBehavior*				 public
 See |CComponent::detachBehavior|


*CStatePersister::detachBehaviors*				 public
 See |CComponent::detachBehaviors|


*CStatePersister::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CStatePersister::disableBehavior*				 public
 See |CComponent::disableBehavior|


*CStatePersister::disableBehaviors*				 public
 See |CComponent::disableBehaviors|


*CStatePersister::enableBehavior*				 public
 See |CComponent::enableBehavior|


*CStatePersister::enableBehaviors*				 public
 See |CComponent::enableBehaviors|


*CStatePersister::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CStatePersister::getEventHandlers*				 public
 See |CComponent::getEventHandlers|


*CStatePersister::getIsInitialized*				 public
 See |CApplicationComponent::getIsInitialized|


*CStatePersister::hasEvent*					 public
 See |CComponent::hasEvent|


*CStatePersister::hasEventHandler*				 public
 See |CComponent::hasEventHandler|


*CStatePersister::hasProperty*					 public
 See |CComponent::hasProperty|


*CStatePersister::init* 					 public
>
 init()
<
(void)

 Initializes the component. This method overrides the parent implementation by
 making sure |CStatePersister::stateFile| contains valid value.


*CStatePersister::load* 					 public
>
 load()
<
(mixed) state data. Null if no state data available.

 Loads state data from persistent storage.


*CStatePersister::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CStatePersister::save* 					 public
>
 save($state)
<
(void)

 Saves application state in persistent storage.
    [state] (mixed) state data (must be serializable).



 vim:tw=78:ts=8:ft=help:norl:
