
*CMssqlCommandBuilder*   >> |CDbCommandBuilder| >> |CComponent|
======================

 CMssqlCommandBuilder provides basic methods to create query commands for
 tables for Mssql Servers.



METHOD DETAILS
------------------------------------------------------------------------------

*CMssqlCommandBuilder::__call*					 public
 See |CComponent::__call|


*CMssqlCommandBuilder::__construct*				 public
 See |CDbCommandBuilder::__construct|


*CMssqlCommandBuilder::__get*					 public
 See |CComponent::__get|


*CMssqlCommandBuilder::__isset* 				 public
 See |CComponent::__isset|


*CMssqlCommandBuilder::__set*					 public
 See |CComponent::__set|


*CMssqlCommandBuilder::__unset* 				 public
 See |CComponent::__unset|


*CMssqlCommandBuilder::applyCondition*				 public
 See |CDbCommandBuilder::applyCondition|


*CMssqlCommandBuilder::applyGroup*				 public
 See |CDbCommandBuilder::applyGroup|


*CMssqlCommandBuilder::applyHaving*				 public
 See |CDbCommandBuilder::applyHaving|


*CMssqlCommandBuilder::applyJoin*				 public
 See |CDbCommandBuilder::applyJoin|


*CMssqlCommandBuilder::applyLimit*				 public
>
 applyLimit($sql, $limit, $offset)
<
(string) SQL with limit and offset.

 This is a port from Prado Framework.

 Overrides parent implementation. Alters the sql to apply $limit and $offset.
 The idea for limit with offset is done by modifying the sql on the fly with
 numerous assumptions on the structure of the sql string. The modification is
 done with reference to the notes from
 http://troels.arvin.dk/db/rdbms/#select-limit-offset

 ' SELECT * FROM (  SELECT TOP n * FROM (    SELECT TOP z columns      --
 (z=n+skip)    FROM tablename    ORDER BY key ASC  ) AS FOO ORDER BY key DESC
 -- ('FOO' may be anything) ) AS BAR ORDER BY key ASC    -- ('BAR' may be
 anything) '

 <b>Regular expressions are used to alter the SQL query. The resulting SQL
 query may be malformed for complex queries.</b> The following restrictions
 apply
   In particular, <b>commas</b> should <b>NOT</b> be used as part of
   the ordering expression or identifier. Commas must only be used
   for separating the ordering clauses.
   In the ORDER BY clause, the column name should NOT be be qualified
   with a table name or view name. Alias the column names or use
   column index.
   No clauses should follow the ORDER BY clause, e.g. no COMPUTE or
   FOR clauses.
    [sql] (string) SQL query string.
    [limit] (integer) maximum number of rows, -1 to ignore limit.
    [offset] (integer) row offset, -1 to ignore offset.


*CMssqlCommandBuilder::applyOrder*				 public
 See |CDbCommandBuilder::applyOrder|


*CMssqlCommandBuilder::asa*					 public
 See |CComponent::asa|


*CMssqlCommandBuilder::attachBehavior*				 public
 See |CComponent::attachBehavior|


*CMssqlCommandBuilder::attachBehaviors* 			 public
 See |CComponent::attachBehaviors|


*CMssqlCommandBuilder::attachEventHandler*			 public
 See |CComponent::attachEventHandler|


*CMssqlCommandBuilder::bindValues*				 public
 See |CDbCommandBuilder::bindValues|


*CMssqlCommandBuilder::canGetProperty*				 public
 See |CComponent::canGetProperty|


*CMssqlCommandBuilder::canSetProperty*				 public
 See |CComponent::canSetProperty|


*CMssqlCommandBuilder::checkCriteria*				 protected
>
 checkCriteria($table, $criteria)
<
(CDbCriteria) the modified criteria

 Checks if the criteria has an order by clause when using offset/limit.
 Override parent implementation to check if an orderby clause if specified
 when querying with an offset If not, order it by pk.
    [table] (CMssqlTableSchema) table schema
    [criteria] (CDbCriteria) criteria


*CMssqlCommandBuilder::composeMultipleInsertCommand*		 protected
 See |CDbCommandBuilder::composeMultipleInsertCommand|


*CMssqlCommandBuilder::createColumnCriteria*			 public
 See |CDbCommandBuilder::createColumnCriteria|


*CMssqlCommandBuilder::createCompositeInCondition*		 protected
>
 createCompositeInCondition($table, $values, $prefix)
<
(string) the expression for selection

 Generates the expression for selecting rows with specified composite key
 values.
    [table] (CDbTableSchema) the table schema
    [values] (array) list of primary key values to be selected within
    [prefix] (string) column prefix (ended with dot)


*CMssqlCommandBuilder::createCountCommand*			 public
>
 createCountCommand($table, $criteria, $alias='t')
<
(CDbCommand) query command.

 Creates a COUNT(*) command for a single table. Override parent implementation
 to remove the order clause of criteria if it exists
    [table] (CDbTableSchema) the table metadata
    [criteria] (CDbCriteria) the query criteria
    [alias] (string) the alias name of the primary table. Defaults to 't'.


*CMssqlCommandBuilder::createCriteria*				 public
 See |CDbCommandBuilder::createCriteria|


*CMssqlCommandBuilder::createDeleteCommand*			 public
>
 createDeleteCommand($table, $criteria)
<
(CDbCommand) delete command.

 Creates a DELETE command. Override parent implementation to check if an
 orderby clause if specified when querying with an offset
    [table] (CDbTableSchema) the table metadata
    [criteria] (CDbCriteria) the query criteria


*CMssqlCommandBuilder::createFindCommand*			 public
>
 createFindCommand($table, $criteria, $alias='t')
<
(CDbCommand) query command.

 Creates a SELECT command for a single table. Override parent implementation
 to check if an orderby clause if specified when querying with an offset
    [table] (CDbTableSchema) the table metadata
    [criteria] (CDbCriteria) the query criteria
    [alias] (string) the alias name of the primary table. Defaults to 't'.


*CMssqlCommandBuilder::createInCondition*			 public
 See |CDbCommandBuilder::createInCondition|


*CMssqlCommandBuilder::createInsertCommand*			 public
 See |CDbCommandBuilder::createInsertCommand|


*CMssqlCommandBuilder::createMultipleInsertCommand*		 public
 See |CDbCommandBuilder::createMultipleInsertCommand|


*CMssqlCommandBuilder::createPkCondition*			 public
 See |CDbCommandBuilder::createPkCondition|


*CMssqlCommandBuilder::createPkCriteria*			 public
 See |CDbCommandBuilder::createPkCriteria|


*CMssqlCommandBuilder::createSearchCondition*			 public
 See |CDbCommandBuilder::createSearchCondition|


*CMssqlCommandBuilder::createSqlCommand*			 public
 See |CDbCommandBuilder::createSqlCommand|


*CMssqlCommandBuilder::createUpdateCommand*			 public
>
 createUpdateCommand($table, $data, $criteria)
<
(CDbCommand) update command.

 Creates an UPDATE command. Override parent implementation because mssql don't
 want to update an identity column
    [table] (CDbTableSchema) the table metadata
    [data] (array) list of columns to be updated (name=>value)
    [criteria] (CDbCriteria) the query criteria


*CMssqlCommandBuilder::createUpdateCounterCommand*		 public
>
 createUpdateCounterCommand($table, $counters, $criteria)
<
(CDbCommand) the created command

 Creates an UPDATE command that increments/decrements certain columns.
 Override parent implementation to check if an orderby clause if specified
 when querying with an offset
    [table] (CDbTableSchema) the table metadata
    [counters] (CDbCriteria) the query criteria
    [criteria] (array) counters to be updated (counter increments/decrements
    indexed by column names.)


*CMssqlCommandBuilder::detachBehavior*				 public
 See |CComponent::detachBehavior|


*CMssqlCommandBuilder::detachBehaviors* 			 public
 See |CComponent::detachBehaviors|


*CMssqlCommandBuilder::detachEventHandler*			 public
 See |CComponent::detachEventHandler|


*CMssqlCommandBuilder::disableBehavior* 			 public
 See |CComponent::disableBehavior|


*CMssqlCommandBuilder::disableBehaviors*			 public
 See |CComponent::disableBehaviors|


*CMssqlCommandBuilder::enableBehavior*				 public
 See |CComponent::enableBehavior|


*CMssqlCommandBuilder::enableBehaviors* 			 public
 See |CComponent::enableBehaviors|


*CMssqlCommandBuilder::ensureTable*				 protected
 See |CDbCommandBuilder::ensureTable|


*CMssqlCommandBuilder::evaluateExpression*			 public
 See |CComponent::evaluateExpression|


*CMssqlCommandBuilder::findOrdering*				 protected
>
 findOrdering($sql)
<
(array) ordering expression as key and ordering direction as value

 Base on simplified syntax
 http://msdn2.microsoft.com/en-us/library/aa259187(SQL.80).aspx
    [sql] (string) $sql


*CMssqlCommandBuilder::getDbConnection* 			 public
 See |CDbCommandBuilder::getDbConnection|


*CMssqlCommandBuilder::getEventHandlers*			 public
 See |CComponent::getEventHandlers|


*CMssqlCommandBuilder::getIntegerPrimaryKeyDefaultValue*	 protected
 See |CDbCommandBuilder::getIntegerPrimaryKeyDefaultValue|


*CMssqlCommandBuilder::getLastInsertID* 			 public
 See |CDbCommandBuilder::getLastInsertID|


*CMssqlCommandBuilder::getSchema*				 public
 See |CDbCommandBuilder::getSchema|


*CMssqlCommandBuilder::hasEvent*				 public
 See |CComponent::hasEvent|


*CMssqlCommandBuilder::hasEventHandler* 			 public
 See |CComponent::hasEventHandler|


*CMssqlCommandBuilder::hasProperty*				 public
 See |CComponent::hasProperty|


*CMssqlCommandBuilder::joinOrdering*				 protected
>
 joinOrdering($orders, $newPrefix)
<
(string) concat the orderings

    [orders] (array) ordering obtained from findOrdering()
    [newPrefix] (string) new table prefix to the ordering columns


*CMssqlCommandBuilder::raiseEvent*				 public
 See |CComponent::raiseEvent|


*CMssqlCommandBuilder::reverseDirection*			 protected
>
 reverseDirection($orders)
<
(array) ordering with reversed direction.

    [orders] (array) original ordering


*CMssqlCommandBuilder::rewriteLimitOffsetSql*			 protected
>
 rewriteLimitOffsetSql($sql, $limit, $offset)
<
(string) modified sql query applied with limit and offset.

 Rewrite sql to apply $limit > and $offset > 0 for MSSQL database. See
 http://troels.arvin.dk/db/rdbms/#select-limit-offset
    [sql] (string) sql query
    [limit] (integer) $limit > 0
    [offset] (integer) $offset > 0



 vim:tw=78:ts=8:ft=help:norl:
