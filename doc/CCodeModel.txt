
*CCodeModel*   >> |CFormModel| >> |CModel| >> |CComponent|
============

 CCodeModel is the base class for model classes that are used to generate
 code.

 Each code generator should have at least one code model class that extends
 from this class. The purpose of a code model is to represent user-supplied
 parameters and use them to generate customized code.

 Derived classes should implement the |CCodeModel::prepare| method whose main
 task is to fill up the |CCodeModel::files| property based on the user
 parameters.

 The |CCodeModel::files| property should be filled with a set of |CCodeFile|
 instances, each representing a single code file to be generated.

 CCodeModel implements the feature of "sticky attributes". A sticky attribute
 is an attribute that can remember its last valid value, even if the user
 closes his browser window and reopen it. To declare an attribute is sticky,
 simply list it in a validation rule with the validator name being "sticky".


PROPERTY DETAILS
------------------------------------------------------------------------------

<answers>				*CCodeModel::answers*
 (array) user confirmations on whether to overwrite existing code files with
 the newly generated ones. The value of this property is internally managed by
 this class and |CCodeGenerator|.

<attributes>				*CCodeModel::attributes*
 See |CModel::attributes|

<errors>				*CCodeModel::errors*
 See |CModel::errors|

<files> 				*CCodeModel::files*
 (array) a list of |CCodeFile| objects that represent the code files to be
 generated. The |CCodeModel::prepare| method is responsible to populate this
 property.

<iterator>				*CCodeModel::iterator*
 See |CModel::iterator|

<keywords>				*CCodeModel::keywords*
 ()

<safeAttributeNames>			*CCodeModel::safeAttributeNames*
 See |CModel::safeAttributeNames|

<scenario>				*CCodeModel::scenario*
 See |CModel::scenario|

<status>				*CCodeModel::status*
 (integer) the status of this model. T The value of this property is
 internally managed by |CCodeGenerator|.

<stickyFile>				*CCodeModel::stickyFile*
 (string) the file path that stores the sticky attribute values.

<template>				*CCodeModel::template*
 (string) the name of the code template that the user has selected. The value
 of this property is internally managed by this class and |CCodeGenerator|.

<templatePath>				*CCodeModel::templatePath*
 (string) the directory that contains the template files.

<templates>				*CCodeModel::templates*
 (array) Returns a list of available code templates (name=>directory). This
 method simply returns the |CCodeGenerator::templates| property value.

<validatorList> 			*CCodeModel::validatorList*
 See |CModel::validatorList|

<validators>				*CCodeModel::validators*
 See |CModel::validators|



METHOD DETAILS
------------------------------------------------------------------------------

*CCodeModel::__call*						 public
 See |CComponent::__call|


*CCodeModel::__construct*					 public
 See |CFormModel::__construct|


*CCodeModel::__get*						 public
 See |CComponent::__get|


*CCodeModel::__isset*						 public
 See |CComponent::__isset|


*CCodeModel::__set*						 public
 See |CComponent::__set|


*CCodeModel::__unset*						 public
 See |CComponent::__unset|


*CCodeModel::addError*						 public
 See |CModel::addError|


*CCodeModel::addErrors* 					 public
 See |CModel::addErrors|


*CCodeModel::afterConstruct*					 protected
 See |CModel::afterConstruct|


*CCodeModel::afterValidate*					 protected
 See |CModel::afterValidate|


*CCodeModel::asa*						 public
 See |CComponent::asa|


*CCodeModel::attachBehavior*					 public
 See |CComponent::attachBehavior|


*CCodeModel::attachBehaviors*					 public
 See |CComponent::attachBehaviors|


*CCodeModel::attachEventHandler*				 public
 See |CComponent::attachEventHandler|


*CCodeModel::attributeLabels*					 public
>
 attributeLabels()
<
(array) the attribute labels

 Declares the model attribute labels. Child classes must override this method
 in the following format:
>
 return array_merge(parent::attributeLabels(), array(
     ...labels for the child class attributes...
 ));
<


*CCodeModel::attributeNames*					 public
 See |CFormModel::attributeNames|


*CCodeModel::beforeValidate*					 protected
 See |CModel::beforeValidate|


*CCodeModel::behaviors* 					 public
 See |CModel::behaviors|


*CCodeModel::canGetProperty*					 public
 See |CComponent::canGetProperty|


*CCodeModel::canSetProperty*					 public
 See |CComponent::canSetProperty|


*CCodeModel::class2id*						 public
>
 class2id($name)
<
(string) the resulting ID

 Converts a class name into a HTML ID. For example, 'PostTag' will be
 converted as 'post-tag'.
    [name] (string) the string to be converted


*CCodeModel::class2name*					 public
>
 class2name($name, $ucwords=true)
<
(string) the resulting words

 Converts a class name into space-separated words. For example, 'PostTag' will
 be converted as 'Post Tag'.
    [name] (string) the string to be converted
    [ucwords] (boolean) whether to capitalize the first letter in each word


*CCodeModel::class2var* 					 public
>
 class2var($name)
<
(string) the variable name converted from the class name

 Converts a class name into a variable name with the first letter in lower
 case. This method is provided because lcfirst() PHP function is only
 available for PHP 5.3+.
    [name] (string) the class name


*CCodeModel::classExists*					 public
>
 classExists($name)
<
(boolean) whether the class exists

 Checks if the named class exists (in a case sensitive manner).
    [name] (string) class name to be checked


*CCodeModel::clearErrors*					 public
 See |CModel::clearErrors|


*CCodeModel::confirmed* 					 public
>
 confirmed($file)
<
(bool) whether the confirmation is found in |CCodeModel::answers| with
appropriate operation

    [file] (CCodeFile) whether the code file should be saved


*CCodeModel::createValidators*					 public
 See |CModel::createValidators|


*CCodeModel::detachBehavior*					 public
 See |CComponent::detachBehavior|


*CCodeModel::detachBehaviors*					 public
 See |CComponent::detachBehaviors|


*CCodeModel::detachEventHandler*				 public
 See |CComponent::detachEventHandler|


*CCodeModel::disableBehavior*					 public
 See |CComponent::disableBehavior|


*CCodeModel::disableBehaviors*					 public
 See |CComponent::disableBehaviors|


*CCodeModel::enableBehavior*					 public
 See |CComponent::enableBehavior|


*CCodeModel::enableBehaviors*					 public
 See |CComponent::enableBehaviors|


*CCodeModel::errorMessage*					 public
>
 errorMessage()
<
(string) the message to be displayed when some error occurred during code file
saving.

 Returns the message to be displayed when some error occurred during code file
 saving. Child classes should override this method if the message needs to be
 customized.


*CCodeModel::evaluateExpression*				 public
 See |CComponent::evaluateExpression|


*CCodeModel::generateAttributeLabel*				 public
 See |CModel::generateAttributeLabel|


*CCodeModel::getAttributeLabel* 				 public
 See |CModel::getAttributeLabel|


*CCodeModel::getAttributes*					 public
 See |CModel::getAttributes|


*CCodeModel::getError*						 public
 See |CModel::getError|


*CCodeModel::getErrors* 					 public
 See |CModel::getErrors|


*CCodeModel::getEventHandlers*					 public
 See |CComponent::getEventHandlers|


*CCodeModel::getIterator*					 public
 See |CModel::getIterator|


*CCodeModel::getSafeAttributeNames*				 public
 See |CModel::getSafeAttributeNames|


*CCodeModel::getScenario*					 public
 See |CModel::getScenario|


*CCodeModel::getStickyFile*					 public
>
 getStickyFile()
<
(string) the file path that stores the sticky attribute values.



*CCodeModel::getTemplatePath*					 public
>
 getTemplatePath()
<
(string) the directory that contains the template files.



*CCodeModel::getTemplates*					 public
>
 getTemplates()
<
(array) a list of available code templates (name=>directory).

 Returns a list of available code templates (name=>directory). This method
 simply returns the |CCodeGenerator::templates| property value.


*CCodeModel::getValidatorList*					 public
 See |CModel::getValidatorList|


*CCodeModel::getValidators*					 public
 See |CModel::getValidators|


*CCodeModel::hasErrors* 					 public
 See |CModel::hasErrors|


*CCodeModel::hasEvent*						 public
 See |CComponent::hasEvent|


*CCodeModel::hasEventHandler*					 public
 See |CComponent::hasEventHandler|


*CCodeModel::hasProperty*					 public
 See |CComponent::hasProperty|


*CCodeModel::init*						 public
 See |CFormModel::init|


*CCodeModel::isAttributeRequired*				 public
 See |CModel::isAttributeRequired|


*CCodeModel::isAttributeSafe*					 public
 See |CModel::isAttributeSafe|


*CCodeModel::loadStickyAttributes*				 public
>
 loadStickyAttributes()
<
(void)

 Loads sticky attributes from a file and populates them into the model.


*CCodeModel::offsetExists*					 public
 See |CModel::offsetExists|


*CCodeModel::offsetGet* 					 public
 See |CModel::offsetGet|


*CCodeModel::offsetSet* 					 public
 See |CModel::offsetSet|


*CCodeModel::offsetUnset*					 public
 See |CModel::offsetUnset|


*CCodeModel::onAfterConstruct*					 public
 See |CModel::onAfterConstruct|


*CCodeModel::onAfterValidate*					 public
 See |CModel::onAfterValidate|


*CCodeModel::onBeforeValidate*					 public
 See |CModel::onBeforeValidate|


*CCodeModel::onUnsafeAttribute* 				 public
 See |CModel::onUnsafeAttribute|


*CCodeModel::pluralize* 					 public
>
 pluralize($name)
<
(string) the pluralized word

 Converts a word to its plural form. Note that this is for English only! For
 example, 'apple' will become 'apples', and 'child' will become 'children'.
    [name] (string) the word to be pluralized


*CCodeModel::prepare*						 public
>
 prepare()
<
(void)

 Prepares the code files to be generated. This is the main method that child
 classes should implement. It should contain the logic that populates the
 |CCodeModel::files| property with a list of code files to be generated.


*CCodeModel::raiseEvent*					 public
 See |CComponent::raiseEvent|


*CCodeModel::render*						 public
>
 render($templateFile, $_params_=NULL)
<
(string) the generated code

 Generates the code using the specified code template file. This method is
 manly used in generate to generate code.
    [templateFile] (string) the code template file path
    [_params_] (array) a set of parameters to be extracted and made available
    in the code template


*CCodeModel::renderResults*					 public
>
 renderResults()
<
(string) the code generation result log.



*CCodeModel::requiredTemplates* 				 public
>
 requiredTemplates()
<
(array) list of code templates that are required. They should be file paths
relative to |CCodeModel::templatePath|.

 Returns a list of code templates that are required. Derived classes usually
 should override this method.


*CCodeModel::rules*						 public
>
 rules()
<
(array) validation rules

 Declares the model validation rules. Child classes must override this method
 in the following format:
>
 return array_merge(parent::rules(), array(
     ...rules for the child class...
 ));
<


*CCodeModel::save*						 public
>
 save()
<
(void)

 Saves the generated code into files.


*CCodeModel::saveStickyAttributes*				 public
>
 saveStickyAttributes()
<
(void)

 Saves sticky attributes into a file.


*CCodeModel::setAttributes*					 public
 See |CModel::setAttributes|


*CCodeModel::setScenario*					 public
 See |CModel::setScenario|


*CCodeModel::sticky*						 public
>
 sticky($attribute, $params)
<
(void)

 The "sticky" validator. This validator does not really validate the
 attributes. It actually saves the attribute value in a file to make it
 sticky.
    [attribute] (string) the attribute to be validated
    [params] (array) the validation parameters


*CCodeModel::successMessage*					 public
>
 successMessage()
<
(string) the message to be displayed when the newly generated code is saved
successfully.

 Returns the message to be displayed when the newly generated code is saved
 successfully. Child classes should override this method if the message needs
 to be customized.


*CCodeModel::unsetAttributes*					 public
 See |CModel::unsetAttributes|


*CCodeModel::validate*						 public
 See |CModel::validate|


*CCodeModel::validateReservedWord*				 public
>
 validateReservedWord($attribute, $params)
<
(void)

 Validates an attribute to make sure it is not taking a PHP reserved keyword.
    [attribute] (string) the attribute to be validated
    [params] (array) validation parameters


*CCodeModel::validateTemplate*					 public
>
 validateTemplate($attribute, $params)
<
(void)

 Validates the template selection. This method validates whether the user
 selects an existing template and the template contains all required template
 files as specified in |CCodeModel::requiredTemplates|.
    [attribute] (string) the attribute to be validated
    [params] (array) validation parameters



 vim:tw=78:ts=8:ft=help:norl:
